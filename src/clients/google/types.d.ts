/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
	"/health": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/** @description Health check for coolify */
		get: operations["getHealth"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/auth/login": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		/**
		 * Login to the application
		 * @description Login to the application. This request will set a cookie with the token. The token is valid for 1 hour.
		 */
		post: operations["postApiAuthLogin"];
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/auth/logout": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		/**
		 * Logout from the application
		 * @description Logout from the application. This request will remove the cookie with the token.
		 */
		post: operations["postApiAuthLogout"];
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/auth/": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * Get auth url
		 * @description Retrieves a url to authenticate with google
		 */
		get: operations["getApiAuth"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/auth/callback": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * Callback from Google
		 * @description Callback from Google
		 */
		get: operations["getApiAuthCallback"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/auth/list-accounts": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * List accounts
		 * @description List accounts
		 */
		get: operations["getApiAuthList-accounts"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/google-calendar/list-calendars": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * List calendars
		 * @description List calendars
		 */
		get: operations["getApiGoogle-calendarList-calendars"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/google-calendar/list-events": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * List events
		 * @description List events
		 */
		get: operations["getApiGoogle-calendarList-events"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/google-calendar/create-event": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		/**
		 * Create event
		 * @description Create event
		 */
		post: operations["postApiGoogle-calendarCreate-event"];
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/google-calendar/delete-event": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		post?: never;
		/**
		 * Delete event
		 * @description Delete event
		 */
		delete: operations["deleteApiGoogle-calendarDelete-event"];
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/google-calendar/update-event": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		/**
		 * Update event
		 * @description Update event
		 */
		patch: operations["patchApiGoogle-calendarUpdate-event"];
		trace?: never;
	};
	"/api/google-gmail/list-emails": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * List emails
		 * @description List emails
		 */
		get: operations["getApiGoogle-gmailList-emails"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/google-gmail/get-email-by-id": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * Get email by ID
		 * @description Get email by ID
		 */
		get: operations["getApiGoogle-gmailGet-email-by-id"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/google-gmail/get-unread-emails": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * Get unread emails
		 * @description Get unread emails
		 */
		get: operations["getApiGoogle-gmailGet-unread-emails"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/google-gmail/get-labels": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * Get labels
		 * @description Get labels
		 */
		get: operations["getApiGoogle-gmailGet-labels"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/google-gmail/search-emails": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * Search emails
		 * @description Search emails
		 */
		get: operations["getApiGoogle-gmailSearch-emails"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/google-gmail/mark-as-read": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		/**
		 * Mark emails as read
		 * @description Mark emails as read
		 */
		patch: operations["patchApiGoogle-gmailMark-as-read"];
		trace?: never;
	};
}
export type webhooks = Record<string, never>;
export interface components {
	schemas: never;
	responses: never;
	parameters: never;
	requestBodies: never;
	headers: never;
	pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
	getHealth: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			200: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
		};
	};
	postApiAuthLogin: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody: {
			content: {
				"application/json": {
					/**
					 * Username
					 * @description The username to login
					 * @example admin
					 */
					username: string;
					/**
					 * Password
					 * @description The password to login
					 * @example 1234567890
					 */
					password: string;
				};
				"multipart/form-data": {
					/**
					 * Username
					 * @description The username to login
					 * @example admin
					 */
					username: string;
					/**
					 * Password
					 * @description The password to login
					 * @example 1234567890
					 */
					password: string;
				};
				"text/plain": {
					/**
					 * Username
					 * @description The username to login
					 * @example admin
					 */
					username: string;
					/**
					 * Password
					 * @description The password to login
					 * @example 1234567890
					 */
					password: string;
				};
			};
		};
		responses: {
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": {
						/**
						 * Success
						 * @description If the login was successful
						 * @example true
						 */
						success: boolean;
						/**
						 * Token
						 * @description The token to login
						 * @example 1234567890
						 */
						token: string;
					};
					"multipart/form-data": {
						/**
						 * Success
						 * @description If the login was successful
						 * @example true
						 */
						success: boolean;
						/**
						 * Token
						 * @description The token to login
						 * @example 1234567890
						 */
						token: string;
					};
					"text/plain": {
						/**
						 * Success
						 * @description If the login was successful
						 * @example true
						 */
						success: boolean;
						/**
						 * Token
						 * @description The token to login
						 * @example 1234567890
						 */
						token: string;
					};
				};
			};
			401: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": {
						/**
						 * Error
						 * @description The error message
						 * @example Invalid credentials
						 */
						error: string;
					};
					"multipart/form-data": {
						/**
						 * Error
						 * @description The error message
						 * @example Invalid credentials
						 */
						error: string;
					};
					"text/plain": {
						/**
						 * Error
						 * @description The error message
						 * @example Invalid credentials
						 */
						error: string;
					};
				};
			};
		};
	};
	postApiAuthLogout: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": {
						/**
						 * Success
						 * @description If the logout was successful
						 * @example true
						 */
						success: boolean;
					};
					"multipart/form-data": {
						/**
						 * Success
						 * @description If the logout was successful
						 * @example true
						 */
						success: boolean;
					};
					"text/plain": {
						/**
						 * Success
						 * @description If the logout was successful
						 * @example true
						 */
						success: boolean;
					};
				};
			};
		};
	};
	getApiAuth: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			200: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
		};
	};
	getApiAuthCallback: {
		parameters: {
			query?: {
				/** @description The code from Google */
				code?: string;
			};
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			200: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
		};
	};
	"getApiAuthList-accounts": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/**
			 * @description The response of the list accounts
			 * @example {
			 *       "accounts": [
			 *         "test@example.com",
			 *         "test2@example.com"
			 *       ]
			 *     }
			 */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": {
						/**
						 * @description The array of account emails
						 * @example [
						 *       "test@example.com",
						 *       "test2@example.com"
						 *     ]
						 */
						accounts: string[];
					};
					"multipart/form-data": {
						/**
						 * @description The array of account emails
						 * @example [
						 *       "test@example.com",
						 *       "test2@example.com"
						 *     ]
						 */
						accounts: string[];
					};
					"text/plain": {
						/**
						 * @description The array of account emails
						 * @example [
						 *       "test@example.com",
						 *       "test2@example.com"
						 *     ]
						 */
						accounts: string[];
					};
				};
			};
		};
	};
	"getApiGoogle-calendarList-calendars": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/**
			 * @description The array of calendars
			 * @example [
			 *       {
			 *         "email": "test@example.com",
			 *         "calendarId": "test@example.com",
			 *         "summary": "Test Calendar",
			 *         "primary": true
			 *       }
			 *     ]
			 */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": {
						/**
						 * Email
						 * @description The email of the owner of the calendar
						 * @example test@example.com
						 */
						email: string;
						/**
						 * Calendar ID
						 * @description The ID of the calendar
						 * @example test@example.com
						 */
						calendarId: string;
						/**
						 * Summary
						 * @description The summary of the calendar
						 * @example Test Calendar
						 */
						summary: string;
						/**
						 * Primary
						 * @description If the calendar is the primary calendar
						 * @example true
						 */
						primary: boolean;
					}[];
					"multipart/form-data": {
						/**
						 * Email
						 * @description The email of the owner of the calendar
						 * @example test@example.com
						 */
						email: string;
						/**
						 * Calendar ID
						 * @description The ID of the calendar
						 * @example test@example.com
						 */
						calendarId: string;
						/**
						 * Summary
						 * @description The summary of the calendar
						 * @example Test Calendar
						 */
						summary: string;
						/**
						 * Primary
						 * @description If the calendar is the primary calendar
						 * @example true
						 */
						primary: boolean;
					}[];
					"text/plain": {
						/**
						 * Email
						 * @description The email of the owner of the calendar
						 * @example test@example.com
						 */
						email: string;
						/**
						 * Calendar ID
						 * @description The ID of the calendar
						 * @example test@example.com
						 */
						calendarId: string;
						/**
						 * Summary
						 * @description The summary of the calendar
						 * @example Test Calendar
						 */
						summary: string;
						/**
						 * Primary
						 * @description If the calendar is the primary calendar
						 * @example true
						 */
						primary: boolean;
					}[];
				};
			};
		};
	};
	"getApiGoogle-calendarList-events": {
		parameters: {
			query: {
				/** @description The email of the owner of the calendar */
				email: string;
				/** @description ID of the calendar to list events from (use 'primary' for the main calendar) */
				calendarId: string;
				/** @description The minimum time to list events from */
				timeMin?: string;
				/** @description The maximum time to list events from */
				timeMax?: string;
				/** @description The maximum number of events to list */
				maxResults?: number;
				/** @description The order to list events in */
				orderBy?: string;
				/** @description If the events should be single events */
				singleEvents?: boolean;
			};
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": {
						/**
						 * ID
						 * @description The ID of the event
						 * @example 1234567890
						 */
						id: string;
						/**
						 * Summary
						 * @description The summary of the event
						 * @example Test Event
						 */
						summary: string;
						/**
						 * Start Date
						 * @description The start date of the event
						 * @example 2025-01-01T00:00:00Z
						 */
						start_date: string;
						/**
						 * End Date
						 * @description The end date of the event
						 * @example 2025-01-01T00:00:00Z
						 */
						end_date: string;
						attendees: {
							/**
							 * Display Name
							 * @description The display name of the attendee
							 * @example John Doe
							 */
							display_name: string;
							/**
							 * Email
							 * @description The email of the attendee
							 * @example john.doe@example.com
							 */
							email: string;
							/**
							 * Response Status
							 * @description The response status of the attendee
							 * @example accepted
							 * @enum {string}
							 */
							response_status:
								| "accepted"
								| "declined"
								| "tentative"
								| "needsAction";
						}[];
						/**
						 * Location
						 * @description The location of the event
						 * @example 123 Main St, Anytown, USA
						 */
						location: string;
						/**
						 * Color ID
						 * @description The color ID of the event
						 * @example 1
						 */
						color_id: string;
						/**
						 * Hangout Link
						 * @description The hangout link of the event
						 * @example https://hangout.com
						 */
						hangout_link: string;
						reminders: {
							/**
							 * Use Default
							 * @description If the reminders should be used
							 * @example true
							 */
							use_default: boolean;
							overrides: {
								/**
								 * Method
								 * @description The method of the reminder
								 * @example email
								 * @enum {string}
								 */
								method: "email" | "popup";
								/**
								 * Minutes
								 * @description The minutes of the reminder
								 * @example 10
								 */
								minutes: number;
							}[];
						};
						organizer: {
							/**
							 * Self
							 * @description If the organizer is the same as the user
							 * @example true
							 */
							self: boolean;
							/**
							 * Display Name
							 * @description The display name of the organizer
							 * @example John Doe
							 */
							display_name: string;
							/**
							 * Email
							 * @description The email of the organizer
							 * @example john.doe@example.com
							 */
							email: string;
						};
						work_location_properties: {
							/**
							 * Type
							 * @description The type of the work location properties
							 * @example homeOffice
							 * @enum {string}
							 */
							type: "homeOffice" | "officeLocation" | "customLocation";
						};
						birthday_properties: {
							/**
							 * Type
							 * @description The type of the birthday properties
							 * @example birthday
							 * @enum {string}
							 */
							type: "birthday" | "anniversary" | "custom" | "other" | "self";
						};
					}[];
					"multipart/form-data": {
						/**
						 * ID
						 * @description The ID of the event
						 * @example 1234567890
						 */
						id: string;
						/**
						 * Summary
						 * @description The summary of the event
						 * @example Test Event
						 */
						summary: string;
						/**
						 * Start Date
						 * @description The start date of the event
						 * @example 2025-01-01T00:00:00Z
						 */
						start_date: string;
						/**
						 * End Date
						 * @description The end date of the event
						 * @example 2025-01-01T00:00:00Z
						 */
						end_date: string;
						attendees: {
							/**
							 * Display Name
							 * @description The display name of the attendee
							 * @example John Doe
							 */
							display_name: string;
							/**
							 * Email
							 * @description The email of the attendee
							 * @example john.doe@example.com
							 */
							email: string;
							/**
							 * Response Status
							 * @description The response status of the attendee
							 * @example accepted
							 * @enum {string}
							 */
							response_status:
								| "accepted"
								| "declined"
								| "tentative"
								| "needsAction";
						}[];
						/**
						 * Location
						 * @description The location of the event
						 * @example 123 Main St, Anytown, USA
						 */
						location: string;
						/**
						 * Color ID
						 * @description The color ID of the event
						 * @example 1
						 */
						color_id: string;
						/**
						 * Hangout Link
						 * @description The hangout link of the event
						 * @example https://hangout.com
						 */
						hangout_link: string;
						reminders: {
							/**
							 * Use Default
							 * @description If the reminders should be used
							 * @example true
							 */
							use_default: boolean;
							overrides: {
								/**
								 * Method
								 * @description The method of the reminder
								 * @example email
								 * @enum {string}
								 */
								method: "email" | "popup";
								/**
								 * Minutes
								 * @description The minutes of the reminder
								 * @example 10
								 */
								minutes: number;
							}[];
						};
						organizer: {
							/**
							 * Self
							 * @description If the organizer is the same as the user
							 * @example true
							 */
							self: boolean;
							/**
							 * Display Name
							 * @description The display name of the organizer
							 * @example John Doe
							 */
							display_name: string;
							/**
							 * Email
							 * @description The email of the organizer
							 * @example john.doe@example.com
							 */
							email: string;
						};
						work_location_properties: {
							/**
							 * Type
							 * @description The type of the work location properties
							 * @example homeOffice
							 * @enum {string}
							 */
							type: "homeOffice" | "officeLocation" | "customLocation";
						};
						birthday_properties: {
							/**
							 * Type
							 * @description The type of the birthday properties
							 * @example birthday
							 * @enum {string}
							 */
							type: "birthday" | "anniversary" | "custom" | "other" | "self";
						};
					}[];
					"text/plain": {
						/**
						 * ID
						 * @description The ID of the event
						 * @example 1234567890
						 */
						id: string;
						/**
						 * Summary
						 * @description The summary of the event
						 * @example Test Event
						 */
						summary: string;
						/**
						 * Start Date
						 * @description The start date of the event
						 * @example 2025-01-01T00:00:00Z
						 */
						start_date: string;
						/**
						 * End Date
						 * @description The end date of the event
						 * @example 2025-01-01T00:00:00Z
						 */
						end_date: string;
						attendees: {
							/**
							 * Display Name
							 * @description The display name of the attendee
							 * @example John Doe
							 */
							display_name: string;
							/**
							 * Email
							 * @description The email of the attendee
							 * @example john.doe@example.com
							 */
							email: string;
							/**
							 * Response Status
							 * @description The response status of the attendee
							 * @example accepted
							 * @enum {string}
							 */
							response_status:
								| "accepted"
								| "declined"
								| "tentative"
								| "needsAction";
						}[];
						/**
						 * Location
						 * @description The location of the event
						 * @example 123 Main St, Anytown, USA
						 */
						location: string;
						/**
						 * Color ID
						 * @description The color ID of the event
						 * @example 1
						 */
						color_id: string;
						/**
						 * Hangout Link
						 * @description The hangout link of the event
						 * @example https://hangout.com
						 */
						hangout_link: string;
						reminders: {
							/**
							 * Use Default
							 * @description If the reminders should be used
							 * @example true
							 */
							use_default: boolean;
							overrides: {
								/**
								 * Method
								 * @description The method of the reminder
								 * @example email
								 * @enum {string}
								 */
								method: "email" | "popup";
								/**
								 * Minutes
								 * @description The minutes of the reminder
								 * @example 10
								 */
								minutes: number;
							}[];
						};
						organizer: {
							/**
							 * Self
							 * @description If the organizer is the same as the user
							 * @example true
							 */
							self: boolean;
							/**
							 * Display Name
							 * @description The display name of the organizer
							 * @example John Doe
							 */
							display_name: string;
							/**
							 * Email
							 * @description The email of the organizer
							 * @example john.doe@example.com
							 */
							email: string;
						};
						work_location_properties: {
							/**
							 * Type
							 * @description The type of the work location properties
							 * @example homeOffice
							 * @enum {string}
							 */
							type: "homeOffice" | "officeLocation" | "customLocation";
						};
						birthday_properties: {
							/**
							 * Type
							 * @description The type of the birthday properties
							 * @example birthday
							 * @enum {string}
							 */
							type: "birthday" | "anniversary" | "custom" | "other" | "self";
						};
					}[];
				};
			};
		};
	};
	"postApiGoogle-calendarCreate-event": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody: {
			content: {
				"application/json": {
					/**
					 * Email
					 * @description The email of the owner of the calendar
					 * @example test@example.com
					 */
					email: string;
					/**
					 * Calendar ID
					 * @description The ID of the calendar
					 * @example test@example.com
					 */
					calendarId: string;
					/**
					 * Summary
					 * @description The summary of the event
					 * @example Test Event
					 */
					summary: string;
					/**
					 * Description
					 * @description The description of the event
					 * @example Test Event
					 */
					description?: string;
					/**
					 * Start
					 * @description The start of the event
					 * @example 2025-01-01T00:00:00Z
					 */
					start: string;
					/**
					 * End
					 * @description The end of the event
					 * @example 2025-01-01T00:00:00Z
					 */
					end: string;
					/**
					 * Time Zone
					 * @description The time zone of the event
					 * @default America/Sao_Paulo
					 * @example America/Sao_Paulo
					 */
					timeZone?: string;
					/**
					 * Location
					 * @description The location of the event
					 * @example 123 Main St, Anytown, USA
					 */
					location?: string;
					attendees?: {
						/**
						 * Email
						 * @description The email of the attendee
						 * @example test@example.com
						 */
						email: string;
					}[];
					reminders?: {
						/**
						 * Use Default
						 * @description If the reminders should be used
						 * @example true
						 */
						useDefault: boolean;
						overrides?: {
							/**
							 * Method
							 * @description The method of the reminder
							 * @example email
							 */
							method: "email" | "popup";
							/**
							 * Minutes
							 * @description The minutes of the reminder
							 * @example 10
							 */
							minutes: number;
						}[];
					};
					recurrence?: string[];
				};
				"multipart/form-data": {
					/**
					 * Email
					 * @description The email of the owner of the calendar
					 * @example test@example.com
					 */
					email: string;
					/**
					 * Calendar ID
					 * @description The ID of the calendar
					 * @example test@example.com
					 */
					calendarId: string;
					/**
					 * Summary
					 * @description The summary of the event
					 * @example Test Event
					 */
					summary: string;
					/**
					 * Description
					 * @description The description of the event
					 * @example Test Event
					 */
					description?: string;
					/**
					 * Start
					 * @description The start of the event
					 * @example 2025-01-01T00:00:00Z
					 */
					start: string;
					/**
					 * End
					 * @description The end of the event
					 * @example 2025-01-01T00:00:00Z
					 */
					end: string;
					/**
					 * Time Zone
					 * @description The time zone of the event
					 * @default America/Sao_Paulo
					 * @example America/Sao_Paulo
					 */
					timeZone?: string;
					/**
					 * Location
					 * @description The location of the event
					 * @example 123 Main St, Anytown, USA
					 */
					location?: string;
					attendees?: {
						/**
						 * Email
						 * @description The email of the attendee
						 * @example test@example.com
						 */
						email: string;
					}[];
					reminders?: {
						/**
						 * Use Default
						 * @description If the reminders should be used
						 * @example true
						 */
						useDefault: boolean;
						overrides?: {
							/**
							 * Method
							 * @description The method of the reminder
							 * @example email
							 */
							method: "email" | "popup";
							/**
							 * Minutes
							 * @description The minutes of the reminder
							 * @example 10
							 */
							minutes: number;
						}[];
					};
					recurrence?: string[];
				};
				"text/plain": {
					/**
					 * Email
					 * @description The email of the owner of the calendar
					 * @example test@example.com
					 */
					email: string;
					/**
					 * Calendar ID
					 * @description The ID of the calendar
					 * @example test@example.com
					 */
					calendarId: string;
					/**
					 * Summary
					 * @description The summary of the event
					 * @example Test Event
					 */
					summary: string;
					/**
					 * Description
					 * @description The description of the event
					 * @example Test Event
					 */
					description?: string;
					/**
					 * Start
					 * @description The start of the event
					 * @example 2025-01-01T00:00:00Z
					 */
					start: string;
					/**
					 * End
					 * @description The end of the event
					 * @example 2025-01-01T00:00:00Z
					 */
					end: string;
					/**
					 * Time Zone
					 * @description The time zone of the event
					 * @default America/Sao_Paulo
					 * @example America/Sao_Paulo
					 */
					timeZone?: string;
					/**
					 * Location
					 * @description The location of the event
					 * @example 123 Main St, Anytown, USA
					 */
					location?: string;
					attendees?: {
						/**
						 * Email
						 * @description The email of the attendee
						 * @example test@example.com
						 */
						email: string;
					}[];
					reminders?: {
						/**
						 * Use Default
						 * @description If the reminders should be used
						 * @example true
						 */
						useDefault: boolean;
						overrides?: {
							/**
							 * Method
							 * @description The method of the reminder
							 * @example email
							 */
							method: "email" | "popup";
							/**
							 * Minutes
							 * @description The minutes of the reminder
							 * @example 10
							 */
							minutes: number;
						}[];
					};
					recurrence?: string[];
				};
			};
		};
		responses: {
			200: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
		};
	};
	"deleteApiGoogle-calendarDelete-event": {
		parameters: {
			query: {
				/** @description The email of the owner of the calendar */
				email: string;
				/** @description The ID of the calendar */
				calendarId: string;
				/** @description The ID of the event */
				eventId: string;
			};
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			200: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
		};
	};
	"patchApiGoogle-calendarUpdate-event": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody: {
			content: {
				"application/json": {
					/**
					 * Email
					 * @description The email of the owner of the calendar
					 * @example test@example.com
					 */
					email: string;
					/**
					 * Calendar ID
					 * @description The ID of the calendar
					 * @example test@example.com
					 */
					calendarId: string;
					/**
					 * Event ID
					 * @description The ID of the event
					 * @example 1234567890
					 */
					eventId: string;
					/**
					 * Summary
					 * @description The summary of the event
					 * @example Test Event
					 */
					summary?: string;
					/**
					 * Description
					 * @description The description of the event
					 * @example Test Event
					 */
					description?: string;
					/**
					 * Start
					 * @description The start of the event
					 * @example 2025-01-01T00:00:00Z
					 */
					start?: string;
					/**
					 * End
					 * @description The end of the event
					 * @example 2025-01-01T00:00:00Z
					 */
					end?: string;
					/**
					 * Time Zone
					 * @description The time zone of the event
					 * @example America/Sao_Paulo
					 */
					timeZone?: string;
					/**
					 * Location
					 * @description The location of the event
					 * @example 123 Main St, Anytown, USA
					 */
					location?: string;
					attendees?: {
						/**
						 * Email
						 * @description The email of the attendee
						 * @example test@example.com
						 */
						email: string;
					}[];
					reminders?: {
						/**
						 * Use Default
						 * @description If the reminders should be used
						 * @example true
						 */
						useDefault: boolean;
					};
					recurrence?: string[];
				};
				"multipart/form-data": {
					/**
					 * Email
					 * @description The email of the owner of the calendar
					 * @example test@example.com
					 */
					email: string;
					/**
					 * Calendar ID
					 * @description The ID of the calendar
					 * @example test@example.com
					 */
					calendarId: string;
					/**
					 * Event ID
					 * @description The ID of the event
					 * @example 1234567890
					 */
					eventId: string;
					/**
					 * Summary
					 * @description The summary of the event
					 * @example Test Event
					 */
					summary?: string;
					/**
					 * Description
					 * @description The description of the event
					 * @example Test Event
					 */
					description?: string;
					/**
					 * Start
					 * @description The start of the event
					 * @example 2025-01-01T00:00:00Z
					 */
					start?: string;
					/**
					 * End
					 * @description The end of the event
					 * @example 2025-01-01T00:00:00Z
					 */
					end?: string;
					/**
					 * Time Zone
					 * @description The time zone of the event
					 * @example America/Sao_Paulo
					 */
					timeZone?: string;
					/**
					 * Location
					 * @description The location of the event
					 * @example 123 Main St, Anytown, USA
					 */
					location?: string;
					attendees?: {
						/**
						 * Email
						 * @description The email of the attendee
						 * @example test@example.com
						 */
						email: string;
					}[];
					reminders?: {
						/**
						 * Use Default
						 * @description If the reminders should be used
						 * @example true
						 */
						useDefault: boolean;
					};
					recurrence?: string[];
				};
				"text/plain": {
					/**
					 * Email
					 * @description The email of the owner of the calendar
					 * @example test@example.com
					 */
					email: string;
					/**
					 * Calendar ID
					 * @description The ID of the calendar
					 * @example test@example.com
					 */
					calendarId: string;
					/**
					 * Event ID
					 * @description The ID of the event
					 * @example 1234567890
					 */
					eventId: string;
					/**
					 * Summary
					 * @description The summary of the event
					 * @example Test Event
					 */
					summary?: string;
					/**
					 * Description
					 * @description The description of the event
					 * @example Test Event
					 */
					description?: string;
					/**
					 * Start
					 * @description The start of the event
					 * @example 2025-01-01T00:00:00Z
					 */
					start?: string;
					/**
					 * End
					 * @description The end of the event
					 * @example 2025-01-01T00:00:00Z
					 */
					end?: string;
					/**
					 * Time Zone
					 * @description The time zone of the event
					 * @example America/Sao_Paulo
					 */
					timeZone?: string;
					/**
					 * Location
					 * @description The location of the event
					 * @example 123 Main St, Anytown, USA
					 */
					location?: string;
					attendees?: {
						/**
						 * Email
						 * @description The email of the attendee
						 * @example test@example.com
						 */
						email: string;
					}[];
					reminders?: {
						/**
						 * Use Default
						 * @description If the reminders should be used
						 * @example true
						 */
						useDefault: boolean;
					};
					recurrence?: string[];
				};
			};
		};
		responses: {
			200: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
		};
	};
	"getApiGoogle-gmailList-emails": {
		parameters: {
			query: {
				/** @description The email of the owner of the emails */
				email: string;
				/** @description The maximum number of emails to list */
				maxResults?: number;
				/** @description The query to search for */
				q?: string;
				labelIds?: string[];
				/** @description If the spam and trash folders should be included */
				includeSpamTrash?: boolean;
			};
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/**
			 * @description The array of emails
			 * @example []
			 */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": {
						/**
						 * ID
						 * @description The ID of the email
						 * @example 1234567890
						 */
						id: string;
						/**
						 * From
						 * @description The from of the email
						 * @example test@example.com
						 */
						from: string;
						/**
						 * To
						 * @description The to of the email
						 * @example test@example.com
						 */
						to: string;
						/**
						 * Subject
						 * @description The subject of the email
						 * @example Test Email
						 */
						subject: string;
						/**
						 * Date
						 * @description The date of the email
						 * @example 2025-01-01T00:00:00Z
						 */
						date: string;
						/**
						 * Is Unread
						 * @description If the email is unread
						 * @example true
						 */
						isUnread: boolean;
					}[];
					"multipart/form-data": {
						/**
						 * ID
						 * @description The ID of the email
						 * @example 1234567890
						 */
						id: string;
						/**
						 * From
						 * @description The from of the email
						 * @example test@example.com
						 */
						from: string;
						/**
						 * To
						 * @description The to of the email
						 * @example test@example.com
						 */
						to: string;
						/**
						 * Subject
						 * @description The subject of the email
						 * @example Test Email
						 */
						subject: string;
						/**
						 * Date
						 * @description The date of the email
						 * @example 2025-01-01T00:00:00Z
						 */
						date: string;
						/**
						 * Is Unread
						 * @description If the email is unread
						 * @example true
						 */
						isUnread: boolean;
					}[];
					"text/plain": {
						/**
						 * ID
						 * @description The ID of the email
						 * @example 1234567890
						 */
						id: string;
						/**
						 * From
						 * @description The from of the email
						 * @example test@example.com
						 */
						from: string;
						/**
						 * To
						 * @description The to of the email
						 * @example test@example.com
						 */
						to: string;
						/**
						 * Subject
						 * @description The subject of the email
						 * @example Test Email
						 */
						subject: string;
						/**
						 * Date
						 * @description The date of the email
						 * @example 2025-01-01T00:00:00Z
						 */
						date: string;
						/**
						 * Is Unread
						 * @description If the email is unread
						 * @example true
						 */
						isUnread: boolean;
					}[];
				};
			};
		};
	};
	"getApiGoogle-gmailGet-email-by-id": {
		parameters: {
			query: {
				/** @description The email of the owner of the email */
				email: string;
				/** @description The ID of the message */
				messageId: string;
				/** @description The format of the email */
				format?: "metadata" | "minimal" | "full" | "raw";
			};
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": {
						/**
						 * ID
						 * @description The ID of the email
						 * @example 1234567890
						 */
						id: string;
						/**
						 * From
						 * @description The from of the email
						 * @example test@example.com
						 */
						from: string;
						/**
						 * To
						 * @description The to of the email
						 * @example test@example.com
						 */
						to: string;
						/**
						 * Subject
						 * @description The subject of the email
						 * @example Test Email
						 */
						subject: string;
						/**
						 * Date
						 * @description The date of the email
						 * @example 2025-01-01T00:00:00Z
						 */
						date: string;
						/**
						 * Is Unread
						 * @description If the email is unread
						 * @example true
						 */
						isUnread: boolean;
						/**
						 * Thread ID
						 * @description The thread ID of the email
						 * @example 1234567890
						 */
						threadId: string;
						/**
						 * Body
						 * @description The body of the email
						 * @example Test Email
						 */
						body: string;
					};
					"multipart/form-data": {
						/**
						 * ID
						 * @description The ID of the email
						 * @example 1234567890
						 */
						id: string;
						/**
						 * From
						 * @description The from of the email
						 * @example test@example.com
						 */
						from: string;
						/**
						 * To
						 * @description The to of the email
						 * @example test@example.com
						 */
						to: string;
						/**
						 * Subject
						 * @description The subject of the email
						 * @example Test Email
						 */
						subject: string;
						/**
						 * Date
						 * @description The date of the email
						 * @example 2025-01-01T00:00:00Z
						 */
						date: string;
						/**
						 * Is Unread
						 * @description If the email is unread
						 * @example true
						 */
						isUnread: boolean;
						/**
						 * Thread ID
						 * @description The thread ID of the email
						 * @example 1234567890
						 */
						threadId: string;
						/**
						 * Body
						 * @description The body of the email
						 * @example Test Email
						 */
						body: string;
					};
					"text/plain": {
						/**
						 * ID
						 * @description The ID of the email
						 * @example 1234567890
						 */
						id: string;
						/**
						 * From
						 * @description The from of the email
						 * @example test@example.com
						 */
						from: string;
						/**
						 * To
						 * @description The to of the email
						 * @example test@example.com
						 */
						to: string;
						/**
						 * Subject
						 * @description The subject of the email
						 * @example Test Email
						 */
						subject: string;
						/**
						 * Date
						 * @description The date of the email
						 * @example 2025-01-01T00:00:00Z
						 */
						date: string;
						/**
						 * Is Unread
						 * @description If the email is unread
						 * @example true
						 */
						isUnread: boolean;
						/**
						 * Thread ID
						 * @description The thread ID of the email
						 * @example 1234567890
						 */
						threadId: string;
						/**
						 * Body
						 * @description The body of the email
						 * @example Test Email
						 */
						body: string;
					};
				};
			};
		};
	};
	"getApiGoogle-gmailGet-unread-emails": {
		parameters: {
			query: {
				/** @description The email of the owner of the emails */
				email: string;
				/** @description The maximum number of emails to list */
				maxResults?: number;
			};
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/**
			 * @description The array of emails
			 * @example []
			 */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": {
						/**
						 * ID
						 * @description The ID of the email
						 * @example 1234567890
						 */
						id: string;
						/**
						 * From
						 * @description The from of the email
						 * @example test@example.com
						 */
						from: string;
						/**
						 * To
						 * @description The to of the email
						 * @example test@example.com
						 */
						to: string;
						/**
						 * Subject
						 * @description The subject of the email
						 * @example Test Email
						 */
						subject: string;
						/**
						 * Date
						 * @description The date of the email
						 * @example 2025-01-01T00:00:00Z
						 */
						date: string;
						/**
						 * Is Unread
						 * @description If the email is unread
						 * @example true
						 */
						isUnread: boolean;
					}[];
					"multipart/form-data": {
						/**
						 * ID
						 * @description The ID of the email
						 * @example 1234567890
						 */
						id: string;
						/**
						 * From
						 * @description The from of the email
						 * @example test@example.com
						 */
						from: string;
						/**
						 * To
						 * @description The to of the email
						 * @example test@example.com
						 */
						to: string;
						/**
						 * Subject
						 * @description The subject of the email
						 * @example Test Email
						 */
						subject: string;
						/**
						 * Date
						 * @description The date of the email
						 * @example 2025-01-01T00:00:00Z
						 */
						date: string;
						/**
						 * Is Unread
						 * @description If the email is unread
						 * @example true
						 */
						isUnread: boolean;
					}[];
					"text/plain": {
						/**
						 * ID
						 * @description The ID of the email
						 * @example 1234567890
						 */
						id: string;
						/**
						 * From
						 * @description The from of the email
						 * @example test@example.com
						 */
						from: string;
						/**
						 * To
						 * @description The to of the email
						 * @example test@example.com
						 */
						to: string;
						/**
						 * Subject
						 * @description The subject of the email
						 * @example Test Email
						 */
						subject: string;
						/**
						 * Date
						 * @description The date of the email
						 * @example 2025-01-01T00:00:00Z
						 */
						date: string;
						/**
						 * Is Unread
						 * @description If the email is unread
						 * @example true
						 */
						isUnread: boolean;
					}[];
				};
			};
		};
	};
	"getApiGoogle-gmailGet-labels": {
		parameters: {
			query: {
				/** @description The email of the owner of the labels */
				email: string;
			};
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": {
						/**
						 * ID
						 * @description The ID of the label
						 * @example 1234567890
						 */
						id: string;
						/**
						 * Name
						 * @description The name of the label
						 * @example Test Label
						 */
						name: string;
						/**
						 * Type
						 * @description The type of the label
						 * @example system
						 */
						type: string;
						/**
						 * Label List Visibility
						 * @description The visibility of the label list
						 * @example show
						 */
						labelListVisibility: string;
					}[];
					"multipart/form-data": {
						/**
						 * ID
						 * @description The ID of the label
						 * @example 1234567890
						 */
						id: string;
						/**
						 * Name
						 * @description The name of the label
						 * @example Test Label
						 */
						name: string;
						/**
						 * Type
						 * @description The type of the label
						 * @example system
						 */
						type: string;
						/**
						 * Label List Visibility
						 * @description The visibility of the label list
						 * @example show
						 */
						labelListVisibility: string;
					}[];
					"text/plain": {
						/**
						 * ID
						 * @description The ID of the label
						 * @example 1234567890
						 */
						id: string;
						/**
						 * Name
						 * @description The name of the label
						 * @example Test Label
						 */
						name: string;
						/**
						 * Type
						 * @description The type of the label
						 * @example system
						 */
						type: string;
						/**
						 * Label List Visibility
						 * @description The visibility of the label list
						 * @example show
						 */
						labelListVisibility: string;
					}[];
				};
			};
		};
	};
	"getApiGoogle-gmailSearch-emails": {
		parameters: {
			query: {
				/** @description The email of the owner of the emails */
				email: string;
				/** @description The query to search for */
				query: string;
				/** @description The maximum number of emails to list */
				maxResults?: number;
			};
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/**
			 * @description The array of emails
			 * @example []
			 */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": {
						/**
						 * ID
						 * @description The ID of the email
						 * @example 1234567890
						 */
						id: string;
						/**
						 * From
						 * @description The from of the email
						 * @example test@example.com
						 */
						from: string;
						/**
						 * To
						 * @description The to of the email
						 * @example test@example.com
						 */
						to: string;
						/**
						 * Subject
						 * @description The subject of the email
						 * @example Test Email
						 */
						subject: string;
						/**
						 * Date
						 * @description The date of the email
						 * @example 2025-01-01T00:00:00Z
						 */
						date: string;
						/**
						 * Is Unread
						 * @description If the email is unread
						 * @example true
						 */
						isUnread: boolean;
					}[];
					"multipart/form-data": {
						/**
						 * ID
						 * @description The ID of the email
						 * @example 1234567890
						 */
						id: string;
						/**
						 * From
						 * @description The from of the email
						 * @example test@example.com
						 */
						from: string;
						/**
						 * To
						 * @description The to of the email
						 * @example test@example.com
						 */
						to: string;
						/**
						 * Subject
						 * @description The subject of the email
						 * @example Test Email
						 */
						subject: string;
						/**
						 * Date
						 * @description The date of the email
						 * @example 2025-01-01T00:00:00Z
						 */
						date: string;
						/**
						 * Is Unread
						 * @description If the email is unread
						 * @example true
						 */
						isUnread: boolean;
					}[];
					"text/plain": {
						/**
						 * ID
						 * @description The ID of the email
						 * @example 1234567890
						 */
						id: string;
						/**
						 * From
						 * @description The from of the email
						 * @example test@example.com
						 */
						from: string;
						/**
						 * To
						 * @description The to of the email
						 * @example test@example.com
						 */
						to: string;
						/**
						 * Subject
						 * @description The subject of the email
						 * @example Test Email
						 */
						subject: string;
						/**
						 * Date
						 * @description The date of the email
						 * @example 2025-01-01T00:00:00Z
						 */
						date: string;
						/**
						 * Is Unread
						 * @description If the email is unread
						 * @example true
						 */
						isUnread: boolean;
					}[];
				};
			};
		};
	};
	"patchApiGoogle-gmailMark-as-read": {
		parameters: {
			query: {
				/** @description The email of the owner of the emails */
				email: string;
			};
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody: {
			content: {
				"application/json": {
					messageIds: string[];
				};
				"multipart/form-data": {
					messageIds: string[];
				};
				"text/plain": {
					messageIds: string[];
				};
			};
		};
		responses: {
			200: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
		};
	};
}
