/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
	"/health": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * Coolify Utils
		 * @description Health check for coolify
		 */
		get: operations["getHealth"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/camera/motion/{area}": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * Get motion detection status for a specific area
		 * @description Returns whether motion is currently detected in the specified area
		 */
		get: operations["getApiCameraMotionByArea"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/router/": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * Get the router data
		 * @description Get the router data
		 */
		get: operations["getApiRouter"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/router/reboot": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		/**
		 * Reboot the router
		 * @description Reboot the router
		 */
		post: operations["postApiRouterReboot"];
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/router/enable-data-fetching": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		/**
		 * Enable the data fetching
		 * @description Enable the data fetching
		 */
		post: operations["postApiRouterEnable-data-fetching"];
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/router/disable-data-fetching": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		/**
		 * Disable the data fetching
		 * @description Disable the data fetching
		 */
		post: operations["postApiRouterDisable-data-fetching"];
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/router/enable-guest-wifi": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		/**
		 * Enable the guest wifi
		 * @description Enable the guest wifi
		 */
		post: operations["postApiRouterEnable-guest-wifi"];
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/router/disable-guest-wifi": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		/**
		 * Disable the guest wifi
		 * @description Disable the guest wifi
		 */
		post: operations["postApiRouterDisable-guest-wifi"];
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/spotify/accounts": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * Get available Spotify accounts
		 * @description Returns list of available Spotify accounts for control
		 */
		get: operations["getApiSpotifyAccounts"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/spotify/accounts/{account}": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * Get Playing Music on Spotify Account
		 * @description Returns data for the specified Spotify account
		 */
		get: operations["getApiSpotifyAccountsByAccount"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/spotify/play/{account}": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		/**
		 * Play music on Spotify account
		 * @description Starts or resumes playback for the specified Spotify account
		 */
		post: operations["postApiSpotifyPlayByAccount"];
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/spotify/pause/{account}": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		/**
		 * Pause music on Spotify account
		 * @description Pauses playback for the specified Spotify account
		 */
		post: operations["postApiSpotifyPauseByAccount"];
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/spotify/next/{account}": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		/**
		 * Skip to next track
		 * @description Skips to the next track for the specified Spotify account
		 */
		post: operations["postApiSpotifyNextByAccount"];
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/spotify/previous/{account}": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		/**
		 * Skip to previous track
		 * @description Skips to the previous track for the specified Spotify account
		 */
		post: operations["postApiSpotifyPreviousByAccount"];
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/spotify/volume/{account}/{volume}": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		/**
		 * Set volume for Spotify account
		 * @description Sets the volume level for the specified Spotify account
		 */
		post: operations["postApiSpotifyVolumeByAccountByVolume"];
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/spotify/play-song/{account}": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		/**
		 * Play specific song
		 * @description Plays a specific song by URI for the specified Spotify account
		 */
		post: operations["postApiSpotifyPlay-songByAccount"];
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/spotify/play-album/{account}": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		/**
		 * Play specific album
		 * @description Plays a specific album by URI for the specified Spotify account
		 */
		post: operations["postApiSpotifyPlay-albumByAccount"];
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/spotify/play-artist/{account}": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		/**
		 * Play specific artist
		 * @description Plays music from a specific artist by URI for the specified Spotify account
		 */
		post: operations["postApiSpotifyPlay-artistByAccount"];
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/status/": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * Get all status sensor names
		 * @description Get the names of all platform sensors
		 */
		get: operations["getApiStatus"];
		put?: never;
		/**
		 * Update multiple status sensors
		 * @description Update the status data for multiple platform sensors
		 */
		post: operations["postApiStatus"];
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/status/all": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * Get all status sensor data
		 * @description Get the status data for all platform sensors
		 */
		get: operations["getApiStatusAll"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/status/{name}": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * Get status sensor data
		 * @description Get the status data for a specific platform sensor
		 */
		get: operations["getApiStatusByName"];
		put?: never;
		/**
		 * Update status sensor data
		 * @description Update the status data for a specific platform sensor
		 */
		post: operations["postApiStatusByName"];
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/lights/available": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * Get available lights
		 * @description Returns list of available lights for control
		 */
		get: operations["getApiLightsAvailable"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/lights/status/{lightName}": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * Get light status
		 * @description Returns the current state and brightness of the specified light
		 */
		get: operations["getApiLightsStatusByLightName"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/lights/control/{lightName}/{state}": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		/**
		 * Turn light on or off
		 * @description Controls the on/off state of the specified light
		 */
		post: operations["postApiLightsControlByLightNameByState"];
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/lights/brightness/{lightName}/{brightness}": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		/**
		 * Set light brightness
		 * @description Sets the brightness level of the specified light
		 */
		post: operations["postApiLightsBrightnessByLightNameByBrightness"];
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/twitch/streamers": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * Get available Twitch streamers
		 * @description Returns list of configured Twitch streamers
		 */
		get: operations["getApiTwitchStreamers"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/twitch/streamer/{streamerId}": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * Get streamer status
		 * @description Returns detailed information about a specific Twitch streamer
		 */
		get: operations["getApiTwitchStreamerByStreamerId"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/train/": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * Get the train status of all available lines
		 * @description Get the train status
		 */
		get: operations["getApiTrain"];
		put?: never;
		/**
		 * Update the train status of all available lines
		 * @description Update the train status of all available lines
		 */
		post: operations["postApiTrain"];
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/train/{line}": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * Get the train status of specific line
		 * @description Get the train status of a specific line
		 */
		get: operations["getApiTrainByLine"];
		put?: never;
		/**
		 * Update the train status of a specific line
		 * @description Update the train status of a specific line
		 */
		post: operations["postApiTrainByLine"];
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/pc/status": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * Get the PC status
		 * @description Get the PC status
		 */
		get: operations["getApiPcStatus"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/pc/turn-off": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		/**
		 * Turn off the PC
		 * @description Turn off the PC
		 */
		post: operations["postApiPcTurn-off"];
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/pc/turn-on": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		/**
		 * Turn on the PC
		 * @description Turn on the PC
		 */
		post: operations["postApiPcTurn-on"];
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
}
export type webhooks = Record<string, never>;
export interface components {
	schemas: never;
	responses: never;
	parameters: never;
	requestBodies: never;
	headers: never;
	pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
	getHealth: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/**
			 * @description Health check for coolify
			 * @example OK
			 */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": string;
					"multipart/form-data": string;
					"text/plain": string;
				};
			};
		};
	};
	getApiCameraMotionByArea: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/**
				 * @description The area to check for motion detection
				 * @example frente
				 */
				area: string;
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/**
			 * Motion Detection Status
			 * @description The motion detection status for the specified area
			 * @example {
			 *       "area": "frente",
			 *       "motionDetected": true
			 *     }
			 */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": {
						/**
						 * Motion Detection Area
						 * @description The area that was checked
						 * @example frente
						 */
						area: string;
						/**
						 * Motion Detected
						 * @description Whether motion is currently detected in the specified area
						 * @example true
						 * @example false
						 */
						motionDetected: boolean;
					};
					"multipart/form-data": {
						/**
						 * Motion Detection Area
						 * @description The area that was checked
						 * @example frente
						 */
						area: string;
						/**
						 * Motion Detected
						 * @description Whether motion is currently detected in the specified area
						 * @example true
						 * @example false
						 */
						motionDetected: boolean;
					};
					"text/plain": {
						/**
						 * Motion Detection Area
						 * @description The area that was checked
						 * @example frente
						 */
						area: string;
						/**
						 * Motion Detected
						 * @description Whether motion is currently detected in the specified area
						 * @example true
						 * @example false
						 */
						motionDetected: boolean;
					};
				};
			};
			/**
			 * @description Error message
			 * @example {
			 *       "error": "Invalid motion detection area"
			 *     }
			 */
			400: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": {
						/**
						 * Error
						 * @description Error message
						 * @example Invalid motion detection area
						 */
						error: string;
					};
					"multipart/form-data": {
						/**
						 * Error
						 * @description Error message
						 * @example Invalid motion detection area
						 */
						error: string;
					};
					"text/plain": {
						/**
						 * Error
						 * @description Error message
						 * @example Invalid motion detection area
						 */
						error: string;
					};
				};
			};
		};
	};
	getApiRouter: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/**
			 * Router Data
			 * @description The data of the router
			 * @example {
			 *       "cpuUsed": "8.0 %",
			 *       "memoryUsed": "58.5411604211962 %",
			 *       "totalClients": "4 clients",
			 *       "dataFetching": "Enabled",
			 *       "guestWifi": "Disabled",
			 *       "downloadSpeed": "344.23 Mbps",
			 *       "uploadSpeed": "133.94 Mbps",
			 *       "ping": "16 ms",
			 *       "mainWifiClients": "4 clients",
			 *       "guestWifiClients": "4 clients",
			 *       "mainWiredClients": "4 clients"
			 *     }
			 */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": {
						/**
						 * CPU Used
						 * @description The CPU used by the router
						 * @example 8.0 %
						 */
						cpuUsed: string;
						/**
						 * Memory Used
						 * @description The memory used by the router
						 * @example 58.5411604211962 %
						 */
						memoryUsed: string;
						/**
						 * Total Clients
						 * @description The total number of clients connected to the router
						 * @example 4 clients
						 */
						totalClients: string;
						/**
						 * Data Fetching
						 * @description If is enabled, the home assistant will fetch the data from the router
						 * @example Enabled
						 * @example Disabled
						 */
						dataFetching: "Enabled" | "Disabled";
						/**
						 * Guest Wifi
						 * @description If is enabled, the guest wifi will be enabled
						 * @example Enabled
						 * @example Disabled
						 */
						guestWifi: "Enabled" | "Disabled";
						/**
						 * Download Speed
						 * @description The download speed of the router
						 * @example 344.23 Mbps
						 */
						downloadSpeed: string;
						/**
						 * Upload Speed
						 * @description The upload speed of the router
						 * @example 133.94 Mbps
						 */
						uploadSpeed: string;
						/**
						 * Ping
						 * @description The ping of the router
						 * @example 16 ms
						 */
						ping: string;
						/**
						 * Main Wifi Clients
						 * @description The number of clients connected to the main wifi
						 * @example 4 clients
						 */
						mainWifiClients: string;
						/**
						 * Guest Wifi Clients
						 * @description The number of clients connected to the guest wifi
						 * @example 4 clients
						 */
						guestWifiClients: string;
						/**
						 * Main Wired Clients
						 * @description The number of clients connected to the main wired
						 * @example 4 clients
						 */
						mainWiredClients: string;
					};
					"multipart/form-data": {
						/**
						 * CPU Used
						 * @description The CPU used by the router
						 * @example 8.0 %
						 */
						cpuUsed: string;
						/**
						 * Memory Used
						 * @description The memory used by the router
						 * @example 58.5411604211962 %
						 */
						memoryUsed: string;
						/**
						 * Total Clients
						 * @description The total number of clients connected to the router
						 * @example 4 clients
						 */
						totalClients: string;
						/**
						 * Data Fetching
						 * @description If is enabled, the home assistant will fetch the data from the router
						 * @example Enabled
						 * @example Disabled
						 */
						dataFetching: "Enabled" | "Disabled";
						/**
						 * Guest Wifi
						 * @description If is enabled, the guest wifi will be enabled
						 * @example Enabled
						 * @example Disabled
						 */
						guestWifi: "Enabled" | "Disabled";
						/**
						 * Download Speed
						 * @description The download speed of the router
						 * @example 344.23 Mbps
						 */
						downloadSpeed: string;
						/**
						 * Upload Speed
						 * @description The upload speed of the router
						 * @example 133.94 Mbps
						 */
						uploadSpeed: string;
						/**
						 * Ping
						 * @description The ping of the router
						 * @example 16 ms
						 */
						ping: string;
						/**
						 * Main Wifi Clients
						 * @description The number of clients connected to the main wifi
						 * @example 4 clients
						 */
						mainWifiClients: string;
						/**
						 * Guest Wifi Clients
						 * @description The number of clients connected to the guest wifi
						 * @example 4 clients
						 */
						guestWifiClients: string;
						/**
						 * Main Wired Clients
						 * @description The number of clients connected to the main wired
						 * @example 4 clients
						 */
						mainWiredClients: string;
					};
					"text/plain": {
						/**
						 * CPU Used
						 * @description The CPU used by the router
						 * @example 8.0 %
						 */
						cpuUsed: string;
						/**
						 * Memory Used
						 * @description The memory used by the router
						 * @example 58.5411604211962 %
						 */
						memoryUsed: string;
						/**
						 * Total Clients
						 * @description The total number of clients connected to the router
						 * @example 4 clients
						 */
						totalClients: string;
						/**
						 * Data Fetching
						 * @description If is enabled, the home assistant will fetch the data from the router
						 * @example Enabled
						 * @example Disabled
						 */
						dataFetching: "Enabled" | "Disabled";
						/**
						 * Guest Wifi
						 * @description If is enabled, the guest wifi will be enabled
						 * @example Enabled
						 * @example Disabled
						 */
						guestWifi: "Enabled" | "Disabled";
						/**
						 * Download Speed
						 * @description The download speed of the router
						 * @example 344.23 Mbps
						 */
						downloadSpeed: string;
						/**
						 * Upload Speed
						 * @description The upload speed of the router
						 * @example 133.94 Mbps
						 */
						uploadSpeed: string;
						/**
						 * Ping
						 * @description The ping of the router
						 * @example 16 ms
						 */
						ping: string;
						/**
						 * Main Wifi Clients
						 * @description The number of clients connected to the main wifi
						 * @example 4 clients
						 */
						mainWifiClients: string;
						/**
						 * Guest Wifi Clients
						 * @description The number of clients connected to the guest wifi
						 * @example 4 clients
						 */
						guestWifiClients: string;
						/**
						 * Main Wired Clients
						 * @description The number of clients connected to the main wired
						 * @example 4 clients
						 */
						mainWiredClients: string;
					};
				};
			};
		};
	};
	postApiRouterReboot: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/**
			 * OK
			 * @description The router was rebooted
			 */
			204: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
		};
	};
	"postApiRouterEnable-data-fetching": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/**
			 * OK
			 * @description The data fetching was enabled
			 */
			204: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
		};
	};
	"postApiRouterDisable-data-fetching": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/**
			 * OK
			 * @description The data fetching was disabled
			 */
			204: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
		};
	};
	"postApiRouterEnable-guest-wifi": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/**
			 * OK
			 * @description The guest wifi was enabled
			 */
			204: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
		};
	};
	"postApiRouterDisable-guest-wifi": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/**
			 * OK
			 * @description The guest wifi was disabled
			 */
			204: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
		};
	};
	getApiSpotifyAccounts: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/**
			 * Spotify Accounts Response
			 * @description Available Spotify accounts for media control
			 * @example {
			 *       "accounts": [
			 *         "Guilherme"
			 *       ]
			 *     }
			 */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": {
						/**
						 * Spotify Accounts
						 * @description List of available Spotify accounts
						 * @example [
						 *       "Guilherme"
						 *     ]
						 */
						accounts: string[];
					};
					"multipart/form-data": {
						/**
						 * Spotify Accounts
						 * @description List of available Spotify accounts
						 * @example [
						 *       "Guilherme"
						 *     ]
						 */
						accounts: string[];
					};
					"text/plain": {
						/**
						 * Spotify Accounts
						 * @description List of available Spotify accounts
						 * @example [
						 *       "Guilherme"
						 *     ]
						 */
						accounts: string[];
					};
				};
			};
		};
	};
	getApiSpotifyAccountsByAccount: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/**
				 * @description The Spotify account to control
				 * @example Guilherme
				 */
				account: "Guilherme";
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/**
			 * Spotify Account Data
			 * @description Data for the specified Spotify account
			 * @example {
			 *       "active": true,
			 *       "state": "playing",
			 *       "musicTitle": "Seu Sangue / Infinitamente Mais / Emanuel / Há Um Rio / Adestra - Ao Vivo no Mineirão",
			 *       "musicArtist": "Fernandinho",
			 *       "musicAlbum": "Fernandinho (Ao Vivo no Mineirão)",
			 *       "musicTimePosition": 91,
			 *       "musicDuration": 430,
			 *       "musicVolume": 0.94,
			 *       "musicShuffle": false,
			 *       "musicRepeat": "off",
			 *       "deviceSource": "gsbenevides2-pc",
			 *       "musicPositionInAlbum": 14,
			 *       "musicId": "spotify:track:4i5EQkhAFZhWLmrGwZSsol"
			 *     }
			 */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": {
						/**
						 * Active
						 * @description Whether the Spotify account is active
						 * @example true
						 */
						active: boolean;
						/**
						 * State
						 * @description The state of the Spotify account
						 * @example playing
						 * @example paused
						 * @example off
						 * @example on
						 * @example idle
						 * @example standby
						 */
						state:
							| "playing"
							| "paused"
							| "off"
							| "on"
							| "idle"
							| "standby"
							| "buffering"
							| "unavailable";
						/**
						 * Music Title
						 * @description The title of the current song
						 * @example Seu Sangue / Infinitamente Mais / Emanuel / Há Um Rio / Adestra - Ao Vivo no Mineirão
						 */
						musicTitle: string;
						/**
						 * Music Artist
						 * @description The artist of the current song
						 * @example Fernandinho
						 */
						musicArtist: string;
						/**
						 * Music Album
						 * @description The album of the current song
						 * @example Fernandinho (Ao Vivo no Mineirão)
						 */
						musicAlbum: string;
						/**
						 * Music Time Position
						 * @description The time position of the current song in seconds
						 * @example 91
						 */
						musicTimePosition: number;
						/**
						 * Music Duration
						 * @description The duration of the current song in seconds
						 * @example 430
						 */
						musicDuration: number;
						/**
						 * Music Volume
						 * @description The volume of the current song (0-1)
						 * @example 0.94
						 */
						musicVolume: number;
						/**
						 * Music Shuffle
						 * @description Whether the current song is shuffled
						 * @example false
						 */
						musicShuffle: boolean;
						/**
						 * Music Repeat
						 * @description The repeat mode of the current song
						 * @example off
						 * @example all
						 * @example one
						 */
						musicRepeat: "off" | "all" | "one";
						/**
						 * Device Source
						 * @description The source of the current song
						 * @example gsbenevides2-pc
						 */
						deviceSource: string;
						/**
						 * Music Position in Album
						 * @description The position of the current song in the album
						 * @example 14
						 */
						musicPositionInAlbum: number;
						/**
						 * Music ID
						 * @description The ID of the current song
						 * @example spotify:track:4i5EQkhAFZhWLmrGwZSsol
						 */
						musicId: string;
					};
					"multipart/form-data": {
						/**
						 * Active
						 * @description Whether the Spotify account is active
						 * @example true
						 */
						active: boolean;
						/**
						 * State
						 * @description The state of the Spotify account
						 * @example playing
						 * @example paused
						 * @example off
						 * @example on
						 * @example idle
						 * @example standby
						 */
						state:
							| "playing"
							| "paused"
							| "off"
							| "on"
							| "idle"
							| "standby"
							| "buffering"
							| "unavailable";
						/**
						 * Music Title
						 * @description The title of the current song
						 * @example Seu Sangue / Infinitamente Mais / Emanuel / Há Um Rio / Adestra - Ao Vivo no Mineirão
						 */
						musicTitle: string;
						/**
						 * Music Artist
						 * @description The artist of the current song
						 * @example Fernandinho
						 */
						musicArtist: string;
						/**
						 * Music Album
						 * @description The album of the current song
						 * @example Fernandinho (Ao Vivo no Mineirão)
						 */
						musicAlbum: string;
						/**
						 * Music Time Position
						 * @description The time position of the current song in seconds
						 * @example 91
						 */
						musicTimePosition: number;
						/**
						 * Music Duration
						 * @description The duration of the current song in seconds
						 * @example 430
						 */
						musicDuration: number;
						/**
						 * Music Volume
						 * @description The volume of the current song (0-1)
						 * @example 0.94
						 */
						musicVolume: number;
						/**
						 * Music Shuffle
						 * @description Whether the current song is shuffled
						 * @example false
						 */
						musicShuffle: boolean;
						/**
						 * Music Repeat
						 * @description The repeat mode of the current song
						 * @example off
						 * @example all
						 * @example one
						 */
						musicRepeat: "off" | "all" | "one";
						/**
						 * Device Source
						 * @description The source of the current song
						 * @example gsbenevides2-pc
						 */
						deviceSource: string;
						/**
						 * Music Position in Album
						 * @description The position of the current song in the album
						 * @example 14
						 */
						musicPositionInAlbum: number;
						/**
						 * Music ID
						 * @description The ID of the current song
						 * @example spotify:track:4i5EQkhAFZhWLmrGwZSsol
						 */
						musicId: string;
					};
					"text/plain": {
						/**
						 * Active
						 * @description Whether the Spotify account is active
						 * @example true
						 */
						active: boolean;
						/**
						 * State
						 * @description The state of the Spotify account
						 * @example playing
						 * @example paused
						 * @example off
						 * @example on
						 * @example idle
						 * @example standby
						 */
						state:
							| "playing"
							| "paused"
							| "off"
							| "on"
							| "idle"
							| "standby"
							| "buffering"
							| "unavailable";
						/**
						 * Music Title
						 * @description The title of the current song
						 * @example Seu Sangue / Infinitamente Mais / Emanuel / Há Um Rio / Adestra - Ao Vivo no Mineirão
						 */
						musicTitle: string;
						/**
						 * Music Artist
						 * @description The artist of the current song
						 * @example Fernandinho
						 */
						musicArtist: string;
						/**
						 * Music Album
						 * @description The album of the current song
						 * @example Fernandinho (Ao Vivo no Mineirão)
						 */
						musicAlbum: string;
						/**
						 * Music Time Position
						 * @description The time position of the current song in seconds
						 * @example 91
						 */
						musicTimePosition: number;
						/**
						 * Music Duration
						 * @description The duration of the current song in seconds
						 * @example 430
						 */
						musicDuration: number;
						/**
						 * Music Volume
						 * @description The volume of the current song (0-1)
						 * @example 0.94
						 */
						musicVolume: number;
						/**
						 * Music Shuffle
						 * @description Whether the current song is shuffled
						 * @example false
						 */
						musicShuffle: boolean;
						/**
						 * Music Repeat
						 * @description The repeat mode of the current song
						 * @example off
						 * @example all
						 * @example one
						 */
						musicRepeat: "off" | "all" | "one";
						/**
						 * Device Source
						 * @description The source of the current song
						 * @example gsbenevides2-pc
						 */
						deviceSource: string;
						/**
						 * Music Position in Album
						 * @description The position of the current song in the album
						 * @example 14
						 */
						musicPositionInAlbum: number;
						/**
						 * Music ID
						 * @description The ID of the current song
						 * @example spotify:track:4i5EQkhAFZhWLmrGwZSsol
						 */
						musicId: string;
					};
				};
			};
		};
	};
	postApiSpotifyPlayByAccount: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/**
				 * @description The Spotify account to control
				 * @example Guilherme
				 */
				account: "Guilherme";
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/**
			 * Success
			 * @description Playback started successfully
			 */
			204: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			/**
			 * Error Response
			 * @description Error message
			 * @example {
			 *       "error": "Invalid account"
			 *     }
			 */
			400: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": {
						/**
						 * Error
						 * @description Error message
						 * @example Invalid account
						 */
						error: string;
					};
					"multipart/form-data": {
						/**
						 * Error
						 * @description Error message
						 * @example Invalid account
						 */
						error: string;
					};
					"text/plain": {
						/**
						 * Error
						 * @description Error message
						 * @example Invalid account
						 */
						error: string;
					};
				};
			};
		};
	};
	postApiSpotifyPauseByAccount: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/**
				 * @description The Spotify account to control
				 * @example Guilherme
				 */
				account: "Guilherme";
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/**
			 * Success
			 * @description Playback paused successfully
			 */
			204: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			/**
			 * Error Response
			 * @description Error message
			 * @example {
			 *       "error": "Invalid account"
			 *     }
			 */
			400: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": {
						/**
						 * Error
						 * @description Error message
						 * @example Invalid account
						 */
						error: string;
					};
					"multipart/form-data": {
						/**
						 * Error
						 * @description Error message
						 * @example Invalid account
						 */
						error: string;
					};
					"text/plain": {
						/**
						 * Error
						 * @description Error message
						 * @example Invalid account
						 */
						error: string;
					};
				};
			};
		};
	};
	postApiSpotifyNextByAccount: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/**
				 * @description The Spotify account to control
				 * @example Guilherme
				 */
				account: "Guilherme";
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/**
			 * Success
			 * @description Skipped to next track successfully
			 */
			204: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			/**
			 * Error Response
			 * @description Error message
			 * @example {
			 *       "error": "Invalid account"
			 *     }
			 */
			400: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": {
						/**
						 * Error
						 * @description Error message
						 * @example Invalid account
						 */
						error: string;
					};
					"multipart/form-data": {
						/**
						 * Error
						 * @description Error message
						 * @example Invalid account
						 */
						error: string;
					};
					"text/plain": {
						/**
						 * Error
						 * @description Error message
						 * @example Invalid account
						 */
						error: string;
					};
				};
			};
		};
	};
	postApiSpotifyPreviousByAccount: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/**
				 * @description The Spotify account to control
				 * @example Guilherme
				 */
				account: "Guilherme";
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/**
			 * Success
			 * @description Skipped to previous track successfully
			 */
			204: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			/**
			 * Error Response
			 * @description Error message
			 * @example {
			 *       "error": "Invalid account"
			 *     }
			 */
			400: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": {
						/**
						 * Error
						 * @description Error message
						 * @example Invalid account
						 */
						error: string;
					};
					"multipart/form-data": {
						/**
						 * Error
						 * @description Error message
						 * @example Invalid account
						 */
						error: string;
					};
					"text/plain": {
						/**
						 * Error
						 * @description Error message
						 * @example Invalid account
						 */
						error: string;
					};
				};
			};
		};
	};
	postApiSpotifyVolumeByAccountByVolume: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/**
				 * @description The Spotify account to control
				 * @example Guilherme
				 */
				account: "Guilherme";
				/**
				 * @description Volume level (0-1)
				 * @example 0.5
				 * @example 0.75
				 */
				volume: number;
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/**
			 * Success
			 * @description Volume set successfully
			 */
			204: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			/**
			 * Error Response
			 * @description Error message
			 * @example {
			 *       "error": "Invalid account"
			 *     }
			 */
			400: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": {
						/**
						 * Error
						 * @description Error message
						 * @example Invalid account
						 */
						error: string;
					};
					"multipart/form-data": {
						/**
						 * Error
						 * @description Error message
						 * @example Invalid account
						 */
						error: string;
					};
					"text/plain": {
						/**
						 * Error
						 * @description Error message
						 * @example Invalid account
						 */
						error: string;
					};
				};
			};
		};
	};
	"postApiSpotifyPlay-songByAccount": {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/**
				 * @description The Spotify account to control
				 * @example Guilherme
				 */
				account: "Guilherme";
			};
			cookie?: never;
		};
		requestBody: {
			content: {
				"application/json": {
					/**
					 * Spotify URI
					 * @description The Spotify URI of the song to play
					 * @example spotify:track:4iV5W9uYEdYUVa79Axb7Rh
					 */
					uri: string;
				};
				"multipart/form-data": {
					/**
					 * Spotify URI
					 * @description The Spotify URI of the song to play
					 * @example spotify:track:4iV5W9uYEdYUVa79Axb7Rh
					 */
					uri: string;
				};
				"text/plain": {
					/**
					 * Spotify URI
					 * @description The Spotify URI of the song to play
					 * @example spotify:track:4iV5W9uYEdYUVa79Axb7Rh
					 */
					uri: string;
				};
			};
		};
		responses: {
			/**
			 * Success
			 * @description Song started playing successfully
			 */
			204: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			/**
			 * Error Response
			 * @description Error message
			 * @example {
			 *       "error": "Invalid account"
			 *     }
			 */
			400: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": {
						/**
						 * Error
						 * @description Error message
						 * @example Invalid account
						 */
						error: string;
					};
					"multipart/form-data": {
						/**
						 * Error
						 * @description Error message
						 * @example Invalid account
						 */
						error: string;
					};
					"text/plain": {
						/**
						 * Error
						 * @description Error message
						 * @example Invalid account
						 */
						error: string;
					};
				};
			};
		};
	};
	"postApiSpotifyPlay-albumByAccount": {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/**
				 * @description The Spotify account to control
				 * @example Guilherme
				 */
				account: "Guilherme";
			};
			cookie?: never;
		};
		requestBody: {
			content: {
				"application/json": {
					/**
					 * Spotify Album URI
					 * @description The Spotify URI of the album to play
					 * @example spotify:album:1A2GTWGtFfWp7KSQTwWOyo
					 */
					uri: string;
				};
				"multipart/form-data": {
					/**
					 * Spotify Album URI
					 * @description The Spotify URI of the album to play
					 * @example spotify:album:1A2GTWGtFfWp7KSQTwWOyo
					 */
					uri: string;
				};
				"text/plain": {
					/**
					 * Spotify Album URI
					 * @description The Spotify URI of the album to play
					 * @example spotify:album:1A2GTWGtFfWp7KSQTwWOyo
					 */
					uri: string;
				};
			};
		};
		responses: {
			/**
			 * Success
			 * @description Album started playing successfully
			 */
			204: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			/**
			 * Error Response
			 * @description Error message
			 * @example {
			 *       "error": "Invalid account"
			 *     }
			 */
			400: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": {
						/**
						 * Error
						 * @description Error message
						 * @example Invalid account
						 */
						error: string;
					};
					"multipart/form-data": {
						/**
						 * Error
						 * @description Error message
						 * @example Invalid account
						 */
						error: string;
					};
					"text/plain": {
						/**
						 * Error
						 * @description Error message
						 * @example Invalid account
						 */
						error: string;
					};
				};
			};
		};
	};
	"postApiSpotifyPlay-artistByAccount": {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/**
				 * @description The Spotify account to control
				 * @example Guilherme
				 */
				account: "Guilherme";
			};
			cookie?: never;
		};
		requestBody: {
			content: {
				"application/json": {
					/**
					 * Spotify Artist URI
					 * @description The Spotify URI of the artist to play
					 * @example spotify:artist:3dBVyJ7JuOMt4GE9607Qin
					 */
					uri: string;
				};
				"multipart/form-data": {
					/**
					 * Spotify Artist URI
					 * @description The Spotify URI of the artist to play
					 * @example spotify:artist:3dBVyJ7JuOMt4GE9607Qin
					 */
					uri: string;
				};
				"text/plain": {
					/**
					 * Spotify Artist URI
					 * @description The Spotify URI of the artist to play
					 * @example spotify:artist:3dBVyJ7JuOMt4GE9607Qin
					 */
					uri: string;
				};
			};
		};
		responses: {
			/**
			 * Success
			 * @description Artist music started playing successfully
			 */
			204: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			/**
			 * Error Response
			 * @description Error message
			 * @example {
			 *       "error": "Invalid account"
			 *     }
			 */
			400: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": {
						/**
						 * Error
						 * @description Error message
						 * @example Invalid account
						 */
						error: string;
					};
					"multipart/form-data": {
						/**
						 * Error
						 * @description Error message
						 * @example Invalid account
						 */
						error: string;
					};
					"text/plain": {
						/**
						 * Error
						 * @description Error message
						 * @example Invalid account
						 */
						error: string;
					};
				};
			};
		};
	};
	getApiStatus: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/**
			 * Status Sensors Array
			 * @description Array of status sensor names
			 * @example [
			 *       "GitHub",
			 *       "Discord",
			 *       "Vercel"
			 *     ]
			 */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": string[];
					"multipart/form-data": string[];
					"text/plain": string[];
				};
			};
		};
	};
	postApiStatus: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody: {
			content: {
				"application/json": {
					/**
					 * Sensor Name
					 * @description The name of the status sensor
					 * @example GitHub
					 * @example Discord
					 * @example Vercel
					 */
					name: string;
					/**
					 * Status URL
					 * @description The URL to check the platform status
					 * @example https://www.githubstatus.com/
					 */
					status_url: string;
					/**
					 * Problem Description
					 * @description Description of any current problems
					 * @example API rate limiting is currently experiencing delays
					 */
					problem_description?: string;
					/**
					 * Has Problem
					 * @description Whether the platform currently has problems
					 * @example false
					 * @example true
					 */
					hasProblem: boolean;
				}[];
				"multipart/form-data": {
					/**
					 * Sensor Name
					 * @description The name of the status sensor
					 * @example GitHub
					 * @example Discord
					 * @example Vercel
					 */
					name: string;
					/**
					 * Status URL
					 * @description The URL to check the platform status
					 * @example https://www.githubstatus.com/
					 */
					status_url: string;
					/**
					 * Problem Description
					 * @description Description of any current problems
					 * @example API rate limiting is currently experiencing delays
					 */
					problem_description?: string;
					/**
					 * Has Problem
					 * @description Whether the platform currently has problems
					 * @example false
					 * @example true
					 */
					hasProblem: boolean;
				}[];
				"text/plain": {
					/**
					 * Sensor Name
					 * @description The name of the status sensor
					 * @example GitHub
					 * @example Discord
					 * @example Vercel
					 */
					name: string;
					/**
					 * Status URL
					 * @description The URL to check the platform status
					 * @example https://www.githubstatus.com/
					 */
					status_url: string;
					/**
					 * Problem Description
					 * @description Description of any current problems
					 * @example API rate limiting is currently experiencing delays
					 */
					problem_description?: string;
					/**
					 * Has Problem
					 * @description Whether the platform currently has problems
					 * @example false
					 * @example true
					 */
					hasProblem: boolean;
				}[];
			};
		};
		responses: {
			/**
			 * Success
			 * @description All status sensors updated successfully
			 */
			204: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			/**
			 * Error Response
			 * @description Error when batch update fails
			 * @example {
			 *       "message": "Failed to update one or more status sensors"
			 *     }
			 */
			500: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": {
						/**
						 * Error Message
						 * @description Error message indicating the batch update failed
						 * @example Failed to update one or more status sensors
						 */
						message: string;
					};
					"multipart/form-data": {
						/**
						 * Error Message
						 * @description Error message indicating the batch update failed
						 * @example Failed to update one or more status sensors
						 */
						message: string;
					};
					"text/plain": {
						/**
						 * Error Message
						 * @description Error message indicating the batch update failed
						 * @example Failed to update one or more status sensors
						 */
						message: string;
					};
				};
			};
		};
	};
	getApiStatusAll: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/**
			 * Status Sensors Array
			 * @description Array of status sensor data
			 * @example {
			 *       "name": "GitHub",
			 *       "status_url": "https://www.githubstatus.com/",
			 *       "hasProblem": false
			 *     }
			 * @example {
			 *       "name": "Discord",
			 *       "status_url": "https://discordstatus.com/",
			 *       "hasProblem": false
			 *     }
			 * @example {
			 *       "name": "Vercel",
			 *       "status_url": "https://status.vercel.com/",
			 *       "hasProblem": false
			 *     }
			 */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": {
						/**
						 * Sensor Name
						 * @description The name of the status sensor
						 */
						name: string;
						/**
						 * Status URL
						 * @description The URL to check the platform status
						 */
						status_url: string;
						/**
						 * Problem Description
						 * @description Description of any current problems
						 */
						problem_description?: string;
						/**
						 * Has Problem
						 * @description Whether the platform currently has problems
						 */
						hasProblem: boolean;
					}[];
					"multipart/form-data": {
						/**
						 * Sensor Name
						 * @description The name of the status sensor
						 */
						name: string;
						/**
						 * Status URL
						 * @description The URL to check the platform status
						 */
						status_url: string;
						/**
						 * Problem Description
						 * @description Description of any current problems
						 */
						problem_description?: string;
						/**
						 * Has Problem
						 * @description Whether the platform currently has problems
						 */
						hasProblem: boolean;
					}[];
					"text/plain": {
						/**
						 * Sensor Name
						 * @description The name of the status sensor
						 */
						name: string;
						/**
						 * Status URL
						 * @description The URL to check the platform status
						 */
						status_url: string;
						/**
						 * Problem Description
						 * @description Description of any current problems
						 */
						problem_description?: string;
						/**
						 * Has Problem
						 * @description Whether the platform currently has problems
						 */
						hasProblem: boolean;
					}[];
				};
			};
		};
	};
	getApiStatusByName: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/**
				 * @description The name of the status sensor to retrieve
				 * @example GitHub
				 * @example Discord
				 * @example Vercel
				 */
				name: string;
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/**
			 * Status Sensor Data
			 * @description Platform status sensor information
			 * @example {
			 *       "name": "GitHub",
			 *       "status_url": "https://www.githubstatus.com/",
			 *       "hasProblem": false
			 *     }
			 */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": {
						/**
						 * Sensor Name
						 * @description The name of the status sensor
						 * @example GitHub
						 */
						name: string;
						/**
						 * Status URL
						 * @description The URL to check the platform status
						 * @example https://www.githubstatus.com/
						 */
						status_url: string;
						/**
						 * Problem Description
						 * @description Description of any current problems
						 * @example API rate limiting is currently experiencing delays
						 */
						problem_description?: string;
						/**
						 * Has Problem
						 * @description Whether the platform currently has problems
						 * @example false
						 * @example true
						 */
						hasProblem: boolean;
					};
					"multipart/form-data": {
						/**
						 * Sensor Name
						 * @description The name of the status sensor
						 * @example GitHub
						 */
						name: string;
						/**
						 * Status URL
						 * @description The URL to check the platform status
						 * @example https://www.githubstatus.com/
						 */
						status_url: string;
						/**
						 * Problem Description
						 * @description Description of any current problems
						 * @example API rate limiting is currently experiencing delays
						 */
						problem_description?: string;
						/**
						 * Has Problem
						 * @description Whether the platform currently has problems
						 * @example false
						 * @example true
						 */
						hasProblem: boolean;
					};
					"text/plain": {
						/**
						 * Sensor Name
						 * @description The name of the status sensor
						 * @example GitHub
						 */
						name: string;
						/**
						 * Status URL
						 * @description The URL to check the platform status
						 * @example https://www.githubstatus.com/
						 */
						status_url: string;
						/**
						 * Problem Description
						 * @description Description of any current problems
						 * @example API rate limiting is currently experiencing delays
						 */
						problem_description?: string;
						/**
						 * Has Problem
						 * @description Whether the platform currently has problems
						 * @example false
						 * @example true
						 */
						hasProblem: boolean;
					};
				};
			};
			/**
			 * Error Response
			 * @description Error when sensor is not found
			 * @example {
			 *       "message": "Status sensor 'GitHub' not found"
			 *     }
			 */
			404: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": {
						/**
						 * Error Message
						 * @description Error message indicating the sensor was not found
						 * @example Status sensor 'GitHub' not found
						 */
						message: string;
					};
					"multipart/form-data": {
						/**
						 * Error Message
						 * @description Error message indicating the sensor was not found
						 * @example Status sensor 'GitHub' not found
						 */
						message: string;
					};
					"text/plain": {
						/**
						 * Error Message
						 * @description Error message indicating the sensor was not found
						 * @example Status sensor 'GitHub' not found
						 */
						message: string;
					};
				};
			};
		};
	};
	postApiStatusByName: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/**
				 * @description The name of the status sensor to update
				 * @example GitHub
				 * @example Discord
				 * @example Vercel
				 */
				name: string;
			};
			cookie?: never;
		};
		requestBody: {
			content: {
				"application/json": {
					/**
					 * Status URL
					 * @description The URL to check the platform status
					 * @example https://www.githubstatus.com/
					 */
					status_url: string;
					/**
					 * Problem Description
					 * @description Description of any current problems
					 * @example API rate limiting is currently experiencing delays
					 */
					problem_description?: string;
					/**
					 * Has Problem
					 * @description Whether the platform currently has problems
					 * @example false
					 * @example true
					 */
					hasProblem: boolean;
				};
				"multipart/form-data": {
					/**
					 * Status URL
					 * @description The URL to check the platform status
					 * @example https://www.githubstatus.com/
					 */
					status_url: string;
					/**
					 * Problem Description
					 * @description Description of any current problems
					 * @example API rate limiting is currently experiencing delays
					 */
					problem_description?: string;
					/**
					 * Has Problem
					 * @description Whether the platform currently has problems
					 * @example false
					 * @example true
					 */
					hasProblem: boolean;
				};
				"text/plain": {
					/**
					 * Status URL
					 * @description The URL to check the platform status
					 * @example https://www.githubstatus.com/
					 */
					status_url: string;
					/**
					 * Problem Description
					 * @description Description of any current problems
					 * @example API rate limiting is currently experiencing delays
					 */
					problem_description?: string;
					/**
					 * Has Problem
					 * @description Whether the platform currently has problems
					 * @example false
					 * @example true
					 */
					hasProblem: boolean;
				};
			};
		};
		responses: {
			/**
			 * Success
			 * @description Status sensor updated successfully
			 */
			204: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			/**
			 * Error Response
			 * @description Error when update fails
			 * @example {
			 *       "message": "Failed to update status sensor 'GitHub'"
			 *     }
			 */
			500: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": {
						/**
						 * Error Message
						 * @description Error message indicating the update failed
						 * @example Failed to update status sensor 'GitHub'
						 */
						message: string;
					};
					"multipart/form-data": {
						/**
						 * Error Message
						 * @description Error message indicating the update failed
						 * @example Failed to update status sensor 'GitHub'
						 */
						message: string;
					};
					"text/plain": {
						/**
						 * Error Message
						 * @description Error message indicating the update failed
						 * @example Failed to update status sensor 'GitHub'
						 */
						message: string;
					};
				};
			};
		};
	};
	getApiLightsAvailable: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/**
			 * Available Lights Response
			 * @description List of all controllable lights
			 * @example {
			 *       "lights": [
			 *         "Quarto Gui",
			 *         "Quarto Ana"
			 *       ]
			 *     }
			 */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": {
						/**
						 * Available Lights
						 * @description List of available lights
						 * @example [
						 *       "Quarto Gui",
						 *       "Quarto Ana"
						 *     ]
						 */
						lights: string[];
					};
					"multipart/form-data": {
						/**
						 * Available Lights
						 * @description List of available lights
						 * @example [
						 *       "Quarto Gui",
						 *       "Quarto Ana"
						 *     ]
						 */
						lights: string[];
					};
					"text/plain": {
						/**
						 * Available Lights
						 * @description List of available lights
						 * @example [
						 *       "Quarto Gui",
						 *       "Quarto Ana"
						 *     ]
						 */
						lights: string[];
					};
				};
			};
		};
	};
	getApiLightsStatusByLightName: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/**
				 * @description The name of the light to check
				 * @example Quarto Gui
				 * @example Quarto Ana
				 */
				lightName: string;
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/**
			 * Light Status
			 * @description Current status and brightness of the light
			 * @example {
			 *       "lightName": "Quarto Gui",
			 *       "state": "on",
			 *       "brightness": 75
			 *     }
			 */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": {
						/**
						 * Light Name
						 * @description The name of the light
						 * @example Quarto Gui
						 */
						lightName: string;
						/**
						 * Light State
						 * @description Current state of the light
						 * @example on
						 * @example off
						 * @example unavailable
						 */
						state: "on" | "off" | "unavailable";
						/**
						 * Brightness
						 * @description Current brightness level (0-100)
						 * @example 75
						 * @example 100
						 * @example 25
						 * @example null
						 */
						brightness: number | null;
					};
					"multipart/form-data": {
						/**
						 * Light Name
						 * @description The name of the light
						 * @example Quarto Gui
						 */
						lightName: string;
						/**
						 * Light State
						 * @description Current state of the light
						 * @example on
						 * @example off
						 * @example unavailable
						 */
						state: "on" | "off" | "unavailable";
						/**
						 * Brightness
						 * @description Current brightness level (0-100)
						 * @example 75
						 * @example 100
						 * @example 25
						 * @example null
						 */
						brightness: number | null;
					};
					"text/plain": {
						/**
						 * Light Name
						 * @description The name of the light
						 * @example Quarto Gui
						 */
						lightName: string;
						/**
						 * Light State
						 * @description Current state of the light
						 * @example on
						 * @example off
						 * @example unavailable
						 */
						state: "on" | "off" | "unavailable";
						/**
						 * Brightness
						 * @description Current brightness level (0-100)
						 * @example 75
						 * @example 100
						 * @example 25
						 * @example null
						 */
						brightness: number | null;
					};
				};
			};
			/**
			 * Error Response for Invalid Light Name
			 * @description Error message when the light name is invalid
			 * @example {
			 *       "error": "Invalid light name"
			 *     }
			 */
			400: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": {
						/**
						 * Error
						 * @description Error message
						 * @example Invalid light name
						 */
						error: string;
					};
					"multipart/form-data": {
						/**
						 * Error
						 * @description Error message
						 * @example Invalid light name
						 */
						error: string;
					};
					"text/plain": {
						/**
						 * Error
						 * @description Error message
						 * @example Invalid light name
						 */
						error: string;
					};
				};
			};
		};
	};
	postApiLightsControlByLightNameByState: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/**
				 * @description The name of the light to control
				 * @example Quarto Gui
				 * @example Quarto Ana
				 */
				lightName: string;
				/**
				 * @description The desired state for the light
				 * @example on
				 * @example off
				 */
				state: "on" | "off";
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/**
			 * Success
			 * @description Light state changed successfully
			 */
			204: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			400: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": {
						/**
						 * Error
						 * @description Error message
						 * @example Invalid light name
						 * @example State must be 'on' or 'off'
						 */
						error: string;
					};
					"multipart/form-data": {
						/**
						 * Error
						 * @description Error message
						 * @example Invalid light name
						 * @example State must be 'on' or 'off'
						 */
						error: string;
					};
					"text/plain": {
						/**
						 * Error
						 * @description Error message
						 * @example Invalid light name
						 * @example State must be 'on' or 'off'
						 */
						error: string;
					};
				};
			};
		};
	};
	postApiLightsBrightnessByLightNameByBrightness: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/**
				 * @description The name of the light to control
				 * @example Quarto Gui
				 * @example Quarto Ana
				 */
				lightName: string;
				/**
				 * @description Brightness level (0-100)
				 * @example 50
				 * @example 75
				 * @example 100
				 */
				brightness: number;
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/**
			 * Success
			 * @description Light brightness set successfully
			 */
			204: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			/**
			 * Error Response for Invalid Light Name
			 * @description Error message when the light name is invalid
			 * @example {
			 *       "error": "Invalid light name"
			 *     }
			 */
			400: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": {
						/**
						 * Error
						 * @description Error message
						 * @example Invalid light name
						 */
						error: string;
					};
					"multipart/form-data": {
						/**
						 * Error
						 * @description Error message
						 * @example Invalid light name
						 */
						error: string;
					};
					"text/plain": {
						/**
						 * Error
						 * @description Error message
						 * @example Invalid light name
						 */
						error: string;
					};
				};
			};
		};
	};
	getApiTwitchStreamers: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/**
			 * Twitch Streamers Response
			 * @description List of all configured Twitch streamers
			 * @example {
			 *       "streamers": [
			 *         {
			 *           "friendly_name": "StreamerName",
			 *           "id": "streamer_username"
			 *         }
			 *       ]
			 *     }
			 */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": {
						/**
						 * Streamers Array
						 * @description List of available Twitch streamers
						 */
						streamers: {
							/**
							 * Friendly Name
							 * @description Display name of the streamer
							 * @example StreamerName
							 */
							friendly_name: string;
							/**
							 * Streamer ID
							 * @description Unique identifier for the streamer
							 * @example streamer_username
							 */
							id: string;
						}[];
					};
					"multipart/form-data": {
						/**
						 * Streamers Array
						 * @description List of available Twitch streamers
						 */
						streamers: {
							/**
							 * Friendly Name
							 * @description Display name of the streamer
							 * @example StreamerName
							 */
							friendly_name: string;
							/**
							 * Streamer ID
							 * @description Unique identifier for the streamer
							 * @example streamer_username
							 */
							id: string;
						}[];
					};
					"text/plain": {
						/**
						 * Streamers Array
						 * @description List of available Twitch streamers
						 */
						streamers: {
							/**
							 * Friendly Name
							 * @description Display name of the streamer
							 * @example StreamerName
							 */
							friendly_name: string;
							/**
							 * Streamer ID
							 * @description Unique identifier for the streamer
							 * @example streamer_username
							 */
							id: string;
						}[];
					};
				};
			};
		};
	};
	getApiTwitchStreamerByStreamerId: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/**
				 * @description The ID of the streamer to check
				 * @example streamer_username
				 */
				streamerId: string;
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/**
			 * Streamer Status
			 * @description Detailed status information for the Twitch streamer
			 * @example {
			 *       "status": "streaming",
			 *       "attributes": {
			 *         "game": "Just Chatting",
			 *         "title": "Playing some games with viewers!",
			 *         "started_at": "2023-01-01T12:00:00Z",
			 *         "viewers": 1234,
			 *         "followers": 50000,
			 *         "subscribed": true,
			 *         "subscription_is_gifted": false,
			 *         "subscription_tier": "1000",
			 *         "following": true,
			 *         "following_since": "2023-01-01T12:00:00Z",
			 *         "entity_picture": "https://static-cdn.jtvnw.net/jtv_user_pictures/...",
			 *         "options": [],
			 *         "friendly_name": "StreamerName"
			 *       }
			 *     }
			 */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": {
						/**
						 * Streaming Status
						 * @description Current streaming status
						 * @example streaming
						 * @example offline
						 * @example unavailable
						 */
						status: "streaming" | "offline" | "unavailable";
						attributes: {
							/**
							 * Game
							 * @description Game being played (if streaming)
							 * @example Just Chatting
							 * @example Valorant
							 * @example null
							 */
							game: string | null;
							/**
							 * Stream Title
							 * @description Current stream title
							 * @example Playing some games
							 * @example null
							 */
							title: string | null;
							/**
							 * Stream Start Time
							 * @description When the stream started (ISO format)
							 * @example 2023-01-01T12:00:00Z
							 * @example null
							 */
							started_at: string | null;
							/**
							 * Viewer Count
							 * @description Current number of viewers
							 * @example 1234
							 * @example null
							 */
							viewers: number | null;
							/**
							 * Follower Count
							 * @description Total number of followers
							 * @example 50000
							 * @example null
							 */
							followers: number | null;
							/**
							 * Subscribed
							 * @description Whether you are subscribed to this streamer
							 * @example true
							 * @example false
							 * @example null
							 */
							subscribed: boolean | null;
							/**
							 * Gifted Subscription
							 * @description Whether the subscription is gifted
							 * @example true
							 * @example false
							 * @example null
							 */
							subscription_is_gifted: boolean | null;
							/**
							 * Subscription Tier
							 * @description Subscription tier level
							 * @example 1000
							 * @example 2000
							 * @example 3000
							 * @example null
							 */
							subscription_tier: string | null;
							/**
							 * Following
							 * @description Whether you are following this streamer
							 * @example true
							 * @example false
							 * @example null
							 */
							following: boolean | null;
							/**
							 * Following Since
							 * @description Date when you started following (ISO format)
							 * @example 2023-01-01T12:00:00Z
							 * @example null
							 */
							following_since: string | null;
							/**
							 * Profile Picture
							 * @description URL to streamer's profile picture
							 * @example https://static-cdn.jtvnw.net/jtv_user_pictures/...
							 * @example null
							 */
							entity_picture: string | null;
							/**
							 * Options
							 * @description Available options for this entity
							 * @example []
							 */
							options: string[];
							/**
							 * Friendly Name
							 * @description Display name of the streamer
							 * @example StreamerName
							 */
							friendly_name: string;
						};
					};
					"multipart/form-data": {
						/**
						 * Streaming Status
						 * @description Current streaming status
						 * @example streaming
						 * @example offline
						 * @example unavailable
						 */
						status: "streaming" | "offline" | "unavailable";
						attributes: {
							/**
							 * Game
							 * @description Game being played (if streaming)
							 * @example Just Chatting
							 * @example Valorant
							 * @example null
							 */
							game: string | null;
							/**
							 * Stream Title
							 * @description Current stream title
							 * @example Playing some games
							 * @example null
							 */
							title: string | null;
							/**
							 * Stream Start Time
							 * @description When the stream started (ISO format)
							 * @example 2023-01-01T12:00:00Z
							 * @example null
							 */
							started_at: string | null;
							/**
							 * Viewer Count
							 * @description Current number of viewers
							 * @example 1234
							 * @example null
							 */
							viewers: number | null;
							/**
							 * Follower Count
							 * @description Total number of followers
							 * @example 50000
							 * @example null
							 */
							followers: number | null;
							/**
							 * Subscribed
							 * @description Whether you are subscribed to this streamer
							 * @example true
							 * @example false
							 * @example null
							 */
							subscribed: boolean | null;
							/**
							 * Gifted Subscription
							 * @description Whether the subscription is gifted
							 * @example true
							 * @example false
							 * @example null
							 */
							subscription_is_gifted: boolean | null;
							/**
							 * Subscription Tier
							 * @description Subscription tier level
							 * @example 1000
							 * @example 2000
							 * @example 3000
							 * @example null
							 */
							subscription_tier: string | null;
							/**
							 * Following
							 * @description Whether you are following this streamer
							 * @example true
							 * @example false
							 * @example null
							 */
							following: boolean | null;
							/**
							 * Following Since
							 * @description Date when you started following (ISO format)
							 * @example 2023-01-01T12:00:00Z
							 * @example null
							 */
							following_since: string | null;
							/**
							 * Profile Picture
							 * @description URL to streamer's profile picture
							 * @example https://static-cdn.jtvnw.net/jtv_user_pictures/...
							 * @example null
							 */
							entity_picture: string | null;
							/**
							 * Options
							 * @description Available options for this entity
							 * @example []
							 */
							options: string[];
							/**
							 * Friendly Name
							 * @description Display name of the streamer
							 * @example StreamerName
							 */
							friendly_name: string;
						};
					};
					"text/plain": {
						/**
						 * Streaming Status
						 * @description Current streaming status
						 * @example streaming
						 * @example offline
						 * @example unavailable
						 */
						status: "streaming" | "offline" | "unavailable";
						attributes: {
							/**
							 * Game
							 * @description Game being played (if streaming)
							 * @example Just Chatting
							 * @example Valorant
							 * @example null
							 */
							game: string | null;
							/**
							 * Stream Title
							 * @description Current stream title
							 * @example Playing some games
							 * @example null
							 */
							title: string | null;
							/**
							 * Stream Start Time
							 * @description When the stream started (ISO format)
							 * @example 2023-01-01T12:00:00Z
							 * @example null
							 */
							started_at: string | null;
							/**
							 * Viewer Count
							 * @description Current number of viewers
							 * @example 1234
							 * @example null
							 */
							viewers: number | null;
							/**
							 * Follower Count
							 * @description Total number of followers
							 * @example 50000
							 * @example null
							 */
							followers: number | null;
							/**
							 * Subscribed
							 * @description Whether you are subscribed to this streamer
							 * @example true
							 * @example false
							 * @example null
							 */
							subscribed: boolean | null;
							/**
							 * Gifted Subscription
							 * @description Whether the subscription is gifted
							 * @example true
							 * @example false
							 * @example null
							 */
							subscription_is_gifted: boolean | null;
							/**
							 * Subscription Tier
							 * @description Subscription tier level
							 * @example 1000
							 * @example 2000
							 * @example 3000
							 * @example null
							 */
							subscription_tier: string | null;
							/**
							 * Following
							 * @description Whether you are following this streamer
							 * @example true
							 * @example false
							 * @example null
							 */
							following: boolean | null;
							/**
							 * Following Since
							 * @description Date when you started following (ISO format)
							 * @example 2023-01-01T12:00:00Z
							 * @example null
							 */
							following_since: string | null;
							/**
							 * Profile Picture
							 * @description URL to streamer's profile picture
							 * @example https://static-cdn.jtvnw.net/jtv_user_pictures/...
							 * @example null
							 */
							entity_picture: string | null;
							/**
							 * Options
							 * @description Available options for this entity
							 * @example []
							 */
							options: string[];
							/**
							 * Friendly Name
							 * @description Display name of the streamer
							 * @example StreamerName
							 */
							friendly_name: string;
						};
					};
				};
			};
			/**
			 * Error Response for Streamer Not Found
			 * @description Error message when the streamer is not found
			 * @example {
			 *       "error": "Streamer not found"
			 *     }
			 */
			404: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": {
						/**
						 * Error
						 * @description Error message
						 * @example Streamer not found
						 */
						error: string;
					};
					"multipart/form-data": {
						/**
						 * Error
						 * @description Error message
						 * @example Streamer not found
						 */
						error: string;
					};
					"text/plain": {
						/**
						 * Error
						 * @description Error message
						 * @example Streamer not found
						 */
						error: string;
					};
				};
			};
		};
	};
	getApiTrain: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/**
			 * List of train lines
			 * @description List of train lines
			 * @example [
			 *       {
			 *         "codigo": 1,
			 *         "status": "OK",
			 *         "descricao": "Linha 1",
			 *         "situacao": "OK",
			 *         "cor": "Azul"
			 *       }
			 *     ]
			 */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": {
						/**
						 * Line code
						 * @description The line code
						 * @example 1
						 */
						codigo: number;
						/**
						 * Status
						 * @description The status of the line
						 * @example OK
						 */
						status: string;
						/**
						 * Description
						 * @description The description of the line
						 * @example Devido a uma situação de emergência, a linha 1 está com velocidade reduzida.
						 */
						descricao?: string;
						/**
						 * Situation
						 * @description The situation of the line
						 * @example Velocidade Reduzida
						 */
						situacao: string;
					}[];
					"multipart/form-data": {
						/**
						 * Line code
						 * @description The line code
						 * @example 1
						 */
						codigo: number;
						/**
						 * Status
						 * @description The status of the line
						 * @example OK
						 */
						status: string;
						/**
						 * Description
						 * @description The description of the line
						 * @example Devido a uma situação de emergência, a linha 1 está com velocidade reduzida.
						 */
						descricao?: string;
						/**
						 * Situation
						 * @description The situation of the line
						 * @example Velocidade Reduzida
						 */
						situacao: string;
					}[];
					"text/plain": {
						/**
						 * Line code
						 * @description The line code
						 * @example 1
						 */
						codigo: number;
						/**
						 * Status
						 * @description The status of the line
						 * @example OK
						 */
						status: string;
						/**
						 * Description
						 * @description The description of the line
						 * @example Devido a uma situação de emergência, a linha 1 está com velocidade reduzida.
						 */
						descricao?: string;
						/**
						 * Situation
						 * @description The situation of the line
						 * @example Velocidade Reduzida
						 */
						situacao: string;
					}[];
				};
			};
		};
	};
	postApiTrain: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody: {
			content: {
				"application/json": {
					/**
					 * Line
					 * @description The line code
					 * @example 1
					 */
					codigo: number;
					/**
					 * Status
					 * @description The status of the line
					 * @example OK
					 */
					status: string;
					/**
					 * Description
					 * @description The description of the line
					 * @example Linha 1
					 */
					descricao?: string;
					/**
					 * Situation
					 * @description The situation of the line
					 * @example OK
					 */
					situacao: string;
					/**
					 * Cor
					 * @description The cor of the line
					 */
					cor: string;
				}[];
				"multipart/form-data": {
					/**
					 * Line
					 * @description The line code
					 * @example 1
					 */
					codigo: number;
					/**
					 * Status
					 * @description The status of the line
					 * @example OK
					 */
					status: string;
					/**
					 * Description
					 * @description The description of the line
					 * @example Linha 1
					 */
					descricao?: string;
					/**
					 * Situation
					 * @description The situation of the line
					 * @example OK
					 */
					situacao: string;
					/**
					 * Cor
					 * @description The cor of the line
					 */
					cor: string;
				}[];
				"text/plain": {
					/**
					 * Line
					 * @description The line code
					 * @example 1
					 */
					codigo: number;
					/**
					 * Status
					 * @description The status of the line
					 * @example OK
					 */
					status: string;
					/**
					 * Description
					 * @description The description of the line
					 * @example Linha 1
					 */
					descricao?: string;
					/**
					 * Situation
					 * @description The situation of the line
					 * @example OK
					 */
					situacao: string;
					/**
					 * Cor
					 * @description The cor of the line
					 */
					cor: string;
				}[];
			};
		};
		responses: {
			/**
			 * No Content
			 * @description No content
			 */
			204: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			/**
			 * Error
			 * @description Error
			 * @example {
			 *       "message": "The line 1 is not available"
			 *     }
			 */
			404: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": {
						/**
						 * Message
						 * @description The message of the error
						 * @example The line 1 is not available
						 */
						message: string;
					};
					"multipart/form-data": {
						/**
						 * Message
						 * @description The message of the error
						 * @example The line 1 is not available
						 */
						message: string;
					};
					"text/plain": {
						/**
						 * Message
						 * @description The message of the error
						 * @example The line 1 is not available
						 */
						message: string;
					};
				};
			};
		};
	};
	getApiTrainByLine: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/**
				 * @description The line code
				 * @example 1
				 * @example 2
				 * @example 3
				 * @example 4
				 * @example 5
				 * @example 7
				 * @example 8
				 * @example 9
				 * @example 10
				 * @example 11
				 * @example 12
				 * @example 13
				 * @example 15
				 */
				line: number;
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/**
			 * Train Line
			 * @description Train line
			 * @example {
			 *       "codigo": 1,
			 *       "status": "OK",
			 *       "descricao": "Linha 1",
			 *       "situacao": "OK",
			 *       "cor": "Azul"
			 *     }
			 */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": {
						/**
						 * Line code
						 * @description The line code
						 * @example 1
						 */
						codigo: number;
						/**
						 * Status
						 * @description The status of the line
						 * @example OK
						 */
						status: string;
						/**
						 * Description
						 * @description The description of the line
						 * @example Devido a uma situação de emergência, a linha 1 está com velocidade reduzida.
						 */
						descricao?: string;
						/**
						 * Situation
						 * @description The situation of the line
						 * @example Velocidade Reduzida
						 */
						situacao: string;
					};
					"multipart/form-data": {
						/**
						 * Line code
						 * @description The line code
						 * @example 1
						 */
						codigo: number;
						/**
						 * Status
						 * @description The status of the line
						 * @example OK
						 */
						status: string;
						/**
						 * Description
						 * @description The description of the line
						 * @example Devido a uma situação de emergência, a linha 1 está com velocidade reduzida.
						 */
						descricao?: string;
						/**
						 * Situation
						 * @description The situation of the line
						 * @example Velocidade Reduzida
						 */
						situacao: string;
					};
					"text/plain": {
						/**
						 * Line code
						 * @description The line code
						 * @example 1
						 */
						codigo: number;
						/**
						 * Status
						 * @description The status of the line
						 * @example OK
						 */
						status: string;
						/**
						 * Description
						 * @description The description of the line
						 * @example Devido a uma situação de emergência, a linha 1 está com velocidade reduzida.
						 */
						descricao?: string;
						/**
						 * Situation
						 * @description The situation of the line
						 * @example Velocidade Reduzida
						 */
						situacao: string;
					};
				};
			};
			/**
			 * Error
			 * @description Error
			 * @example {
			 *       "message": "The line 1 is not available"
			 *     }
			 */
			404: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": {
						/**
						 * Message
						 * @description The message of the error
						 * @example The line 1 is not available
						 */
						message: string;
					};
					"multipart/form-data": {
						/**
						 * Message
						 * @description The message of the error
						 * @example The line 1 is not available
						 */
						message: string;
					};
					"text/plain": {
						/**
						 * Message
						 * @description The message of the error
						 * @example The line 1 is not available
						 */
						message: string;
					};
				};
			};
		};
	};
	postApiTrainByLine: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/**
				 * @description The line code
				 * @example 1
				 * @example 2
				 * @example 3
				 * @example 4
				 * @example 5
				 * @example 7
				 * @example 8
				 * @example 9
				 * @example 10
				 * @example 11
				 * @example 12
				 * @example 13
				 * @example 15
				 */
				line: number;
			};
			cookie?: never;
		};
		requestBody: {
			content: {
				"application/json": {
					/**
					 * Status
					 * @description The status of the line
					 * @example OK
					 */
					status: string;
					/**
					 * Description
					 * @description The description of the line
					 * @example Linha 1
					 */
					descricao?: string;
					/**
					 * Situation
					 * @description The situation of the line
					 * @example OK
					 */
					situacao: string;
					/**
					 * Cor
					 * @description The cor of the line
					 * @example Azul
					 */
					cor: string;
				};
				"multipart/form-data": {
					/**
					 * Status
					 * @description The status of the line
					 * @example OK
					 */
					status: string;
					/**
					 * Description
					 * @description The description of the line
					 * @example Linha 1
					 */
					descricao?: string;
					/**
					 * Situation
					 * @description The situation of the line
					 * @example OK
					 */
					situacao: string;
					/**
					 * Cor
					 * @description The cor of the line
					 * @example Azul
					 */
					cor: string;
				};
				"text/plain": {
					/**
					 * Status
					 * @description The status of the line
					 * @example OK
					 */
					status: string;
					/**
					 * Description
					 * @description The description of the line
					 * @example Linha 1
					 */
					descricao?: string;
					/**
					 * Situation
					 * @description The situation of the line
					 * @example OK
					 */
					situacao: string;
					/**
					 * Cor
					 * @description The cor of the line
					 * @example Azul
					 */
					cor: string;
				};
			};
		};
		responses: {
			/**
			 * No Content
			 * @description No content
			 */
			204: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			/**
			 * Error
			 * @description Error
			 * @example {
			 *       "message": "The line 1 is not available"
			 *     }
			 */
			404: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": {
						/**
						 * Message
						 * @description The message of the error
						 * @example The line 1 is not available
						 */
						message: string;
					};
					"multipart/form-data": {
						/**
						 * Message
						 * @description The message of the error
						 * @example The line 1 is not available
						 */
						message: string;
					};
					"text/plain": {
						/**
						 * Message
						 * @description The message of the error
						 * @example The line 1 is not available
						 */
						message: string;
					};
				};
			};
		};
	};
	getApiPcStatus: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/**
			 * @description PC status
			 * @example {
			 *       "isConnected": true
			 *     }
			 */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": {
						isConnected: boolean;
					};
					"multipart/form-data": {
						isConnected: boolean;
					};
					"text/plain": {
						isConnected: boolean;
					};
				};
			};
		};
	};
	"postApiPcTurn-off": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description PC turned off */
			204: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
		};
	};
	"postApiPcTurn-on": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description PC turned on */
			204: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
		};
	};
}
